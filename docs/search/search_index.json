{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Enterprise Architect Tutorial Enterprise Architect (EA) is an industrial-grade commercial Model-Based Engineering tool. EA has notably been used successfuly in industrial projects and is the base platform for several industrial modeling tools. EA can be effitiently used if the users know both the concepts of model-based System Modeling and the practical know-hows of the tool. Project homepage: https://sparxsystems.com/products/ea/ For the tutorial, see links to the left. All tutorials assumes that the EA was set up correctly and the neccessary configuration steps, descibed in the General EA Guide, was executed properly.","title":"Enterprise Architect Tutorial"},{"location":"#enterprise-architect-tutorial","text":"Enterprise Architect (EA) is an industrial-grade commercial Model-Based Engineering tool. EA has notably been used successfuly in industrial projects and is the base platform for several industrial modeling tools. EA can be effitiently used if the users know both the concepts of model-based System Modeling and the practical know-hows of the tool. Project homepage: https://sparxsystems.com/products/ea/ For the tutorial, see links to the left. All tutorials assumes that the EA was set up correctly and the neccessary configuration steps, descibed in the General EA Guide, was executed properly.","title":"Enterprise Architect Tutorial"},{"location":"SmartGit/","text":"Potential Issues with SmartGit \"Local file has changed\" : if you are sure you don't have valuable changes in your model file, close EA, then click \"discard\", and retry the original operation. No branches when cloning repository : You might have cloned an uninitialized repository. Try creating a branch (either locally or on GitHub), click fetch, then checkout the origin/<branchname> branch under \"All branches and tags\". Merging fails because LemonTree/SmartGit could not write the model file : close EA.","title":"SmartGit FAQ"},{"location":"SmartGit/#potential-issues-with-smartgit","text":"\"Local file has changed\" : if you are sure you don't have valuable changes in your model file, close EA, then click \"discard\", and retry the original operation. No branches when cloning repository : You might have cloned an uninitialized repository. Try creating a branch (either locally or on GitHub), click fetch, then checkout the origin/<branchname> branch under \"All branches and tags\". Merging fails because LemonTree/SmartGit could not write the model file : close EA.","title":"Potential Issues with SmartGit"},{"location":"allocation-modeling-guide/","text":"Simple allocation modeling You can use the alloation relation to define the allocation between blocks. You can find the \"Allocation\" tool in the \"SysML Block Relationship\" and in the \"SysML Common\" toolboxes. You can right click on the diagram and uning the \"Switch View/Relationship Matrix View\" command you can go into table view. You can filter the allocations if you select \" SysML1.4::allocate \" in the \" connector \" menu. You can add new allocations if you right click in any cell and select the \"Create New Relationship/Allocated to\" command. This command only works properly if the connector filter is turned off. Detailed allocation modeling You can create a detailed allocation model, where you can allocate the internal properties of the blocks. Firstly, you shall create a BDD and add the \"top-level\" blocks. Make sure that the blocks have a structure model and the size of the blocks in the allocation diagrams are bigger then the largest IBD of the blocks. Copy-paste the content of the IBDs of the blocks into the allocation diagrams. Define the allocation between the part properties using the \" allocation \" relation. Allocation using matrix view You can define allocation using the matrix view if the source and the target of the allocation relations are in different packages. You shall select the package of the source of allocation and click on the the \"Package/Matrix / Open as Source\" command in the \"Design\" menu. Select the target package using the \"Locate Package in Browser\" command. Set the type of the allocated elements \"Type\" field. This way you can add new filters. Set the type of relationships to \"Allocate\" in the \"Link Type\" field. In the table you can add new allocation relationships by right clicking on a cell and using the \"Create new relationship\" command.","title":"Allocation modeling using Enterprise Architect"},{"location":"allocation-modeling-guide/#simple-allocation-modeling","text":"You can use the alloation relation to define the allocation between blocks. You can find the \"Allocation\" tool in the \"SysML Block Relationship\" and in the \"SysML Common\" toolboxes. You can right click on the diagram and uning the \"Switch View/Relationship Matrix View\" command you can go into table view. You can filter the allocations if you select \" SysML1.4::allocate \" in the \" connector \" menu. You can add new allocations if you right click in any cell and select the \"Create New Relationship/Allocated to\" command. This command only works properly if the connector filter is turned off.","title":"Simple allocation modeling"},{"location":"allocation-modeling-guide/#detailed-allocation-modeling","text":"You can create a detailed allocation model, where you can allocate the internal properties of the blocks. Firstly, you shall create a BDD and add the \"top-level\" blocks. Make sure that the blocks have a structure model and the size of the blocks in the allocation diagrams are bigger then the largest IBD of the blocks. Copy-paste the content of the IBDs of the blocks into the allocation diagrams. Define the allocation between the part properties using the \" allocation \" relation.","title":"Detailed allocation modeling"},{"location":"allocation-modeling-guide/#allocation-using-matrix-view","text":"You can define allocation using the matrix view if the source and the target of the allocation relations are in different packages. You shall select the package of the source of allocation and click on the the \"Package/Matrix / Open as Source\" command in the \"Design\" menu. Select the target package using the \"Locate Package in Browser\" command. Set the type of the allocated elements \"Type\" field. This way you can add new filters. Set the type of relationships to \"Allocate\" in the \"Link Type\" field. In the table you can add new allocation relationships by right clicking on a cell and using the \"Create new relationship\" command.","title":"Allocation using matrix view"},{"location":"behavior-modeling-guide/","text":"Statemachine modeling You can create a statemachine diagram if you right click a block and select \" Add/ State Machine \". Then name the statemachine and click \" OK \". Create composite states by moving other states into other states. Create multiple paralell regions within states in the \" Regions \" tab of the Preferences window. Define the name of the region in the \" Name \" field and click \" Add \". You can define the guard of a transition if you select a transition, and in the \" Constraint \" tab of the Preferences window. In the \" Constraint \" tab of the Preferences window you can add triggers to transitions if you click \" New \" specify the name of the trigger and click \" Save \". The name and the label of the trigger is not affected by the type and the specification of the trigger. As a result, you should mind follow the syntax of the trigger labels when you define the name of triggers. In the \" Constraint \" tab of the Preferences window you can activites as effects of transitions if you set the \" Effect is a Behavior \" option. You can set the entry, do and exit actions of states in the \" Behavior \" tab of the Feature window. Firstly, you define the name of the action and if you double click the name of the action you can specify the referenced activity. Activity modeling You can create an activity diagram if you select SysML persepective and you right click on any block or package and select \" Add/Activity/with Activity Diagram \". In the pop-up window specify the name of the activity and press \" OK \". Drag and drop elements from the \"Toolbox\" to create new elements in the activity diagram. Add actions from the Toolbar and int the pop-up menu select the type of the new action. In the case of \" Send \" and \" Accept \" actions, you can specify in the \" Properties \" window the port of the actions in the \" On Port \" field in the \" Element \" tab. You can specify the transmitted or recieved signal in the \" Signal \" of the \" Condition \" tab in the \" Properties \" window. Unfortunately none of these properties is visualized in the diagram, therefore it is strongly advised to add a note, which contains all these information. Sequence modeling You can create a sequence diagram if you right click an element in the \" Browser \" and select add diagram and choose \" Sequence Diagram \". You can create new objects with lifelines using by draging \" Sequence \" elements from the \" Toolbox \". Alternatively, you can drag and drop existing elements from the \" Browser \" into the diagram. The Enterprise Architect will automatically add lifeline to the elements. Moreover you can add properties of the elements to the diagram. Using the \" Toolbox \" you can add messages into the diagram. You can add signals and data objects to the messages if you right click on a message and select the \" Advanced/Information Flows Realized \" command. In the pop-up windows you shall click on \" Create new information flow \" field and select a Class or a Signal. You can add duration and timing constraints to messages if you right click on a message and select \" Timing Details \". In the pop-up window you can specify the timing related constraints and observations. You can set the synchronicity type of a message if you right click on a message and select the \"Toogle IsReturn\" command. You can modify the lifeline activations if you right click on a message and select the \" Activations/Extend Source Activation \" commands. You can add fragments using the toolbox. You can add multiple region to a fragment by adding new conditions in the \" Combined fragment \" tab of the \" Properties \" window.","title":"Behavior modeling using Enterprise Architect"},{"location":"behavior-modeling-guide/#statemachine-modeling","text":"You can create a statemachine diagram if you right click a block and select \" Add/ State Machine \". Then name the statemachine and click \" OK \". Create composite states by moving other states into other states. Create multiple paralell regions within states in the \" Regions \" tab of the Preferences window. Define the name of the region in the \" Name \" field and click \" Add \". You can define the guard of a transition if you select a transition, and in the \" Constraint \" tab of the Preferences window. In the \" Constraint \" tab of the Preferences window you can add triggers to transitions if you click \" New \" specify the name of the trigger and click \" Save \". The name and the label of the trigger is not affected by the type and the specification of the trigger. As a result, you should mind follow the syntax of the trigger labels when you define the name of triggers. In the \" Constraint \" tab of the Preferences window you can activites as effects of transitions if you set the \" Effect is a Behavior \" option. You can set the entry, do and exit actions of states in the \" Behavior \" tab of the Feature window. Firstly, you define the name of the action and if you double click the name of the action you can specify the referenced activity.","title":"Statemachine modeling"},{"location":"behavior-modeling-guide/#activity-modeling","text":"You can create an activity diagram if you select SysML persepective and you right click on any block or package and select \" Add/Activity/with Activity Diagram \". In the pop-up window specify the name of the activity and press \" OK \". Drag and drop elements from the \"Toolbox\" to create new elements in the activity diagram. Add actions from the Toolbar and int the pop-up menu select the type of the new action. In the case of \" Send \" and \" Accept \" actions, you can specify in the \" Properties \" window the port of the actions in the \" On Port \" field in the \" Element \" tab. You can specify the transmitted or recieved signal in the \" Signal \" of the \" Condition \" tab in the \" Properties \" window. Unfortunately none of these properties is visualized in the diagram, therefore it is strongly advised to add a note, which contains all these information.","title":"Activity modeling"},{"location":"behavior-modeling-guide/#sequence-modeling","text":"You can create a sequence diagram if you right click an element in the \" Browser \" and select add diagram and choose \" Sequence Diagram \". You can create new objects with lifelines using by draging \" Sequence \" elements from the \" Toolbox \". Alternatively, you can drag and drop existing elements from the \" Browser \" into the diagram. The Enterprise Architect will automatically add lifeline to the elements. Moreover you can add properties of the elements to the diagram. Using the \" Toolbox \" you can add messages into the diagram. You can add signals and data objects to the messages if you right click on a message and select the \" Advanced/Information Flows Realized \" command. In the pop-up windows you shall click on \" Create new information flow \" field and select a Class or a Signal. You can add duration and timing constraints to messages if you right click on a message and select \" Timing Details \". In the pop-up window you can specify the timing related constraints and observations. You can set the synchronicity type of a message if you right click on a message and select the \"Toogle IsReturn\" command. You can modify the lifeline activations if you right click on a message and select the \" Activations/Extend Source Activation \" commands. You can add fragments using the toolbox. You can add multiple region to a fragment by adding new conditions in the \" Combined fragment \" tab of the \" Properties \" window.","title":"Sequence modeling"},{"location":"composition-modeling-guide/","text":"Containment modeling Check that the template package is configured in the \" Settings/Settings/Project Template Package... \" Create a BDD and define some blocks using the Toolbox. The new blocks will appear in the Browser. Define the composition between the components using the \" Part Association \" relation tool in the Toolbox. This way you can create part properties of the blocks. You may use the \"Shared Association\" or the \" Reference Association \" tools to create reference properties of the blocks. The new properties will appear in the Browser and in the \" Part/Properties \" tab of the \" Features \" window (if you select the block). Define the name and the multiplicity of the part and reference properties in the \" Source \" tab of the Properties window. Modeling ports It is advised to define the ports of the blocks in the BDD. You may use the Browser and the Features windows to create ports but the usage of BDD make the process much more convinient. You can add the \" Port \", \" Proxy Port \" and \" Full Port \" tools to add different ports to the Blocks. The newly created port will appear in the Browser and in the \" Interaction Points \" tab of the \" Features \" window (if you select the block). You can set the Name, the Stereotypes, the Multiplicity, the Conjugated attribute and the Type of the ports in the Preferences window. If the type of the port contain flow properties then an arrow appears in the ports in accordance with the direction of the flow properties. In BDDs you can easily copy ports (and another modling elements) if you press CTRL and pull the port from one block to another. Then you may change the name and conjugated attribute of the ports. If a port is conjugated then the arrow of the port (if it has any) changes direction. You may change the apparance of the diagram if you delete visually the ports and turn on the visibility of the ports compartments in the \" Compartments \" tab of the Preferences window (if you select nothing and click anywhere on the diagram). You may set the style of the relations to \" Tree Vertical \", by right clicking the relations. You can accelerate this process if you set the style of a relation, right click on the relation and use the \"Apply Style on Diagram/Connectors of the Same Type\" command. Generalization and redefine Create a BDD and define some blocks and generalization between them using the Toolbox. If a block generalizes another block then you can copy the parts and ports of the generalized block can be copied to the new block using the Features tab. Turn on the \"Show Inherited\" property and right click on the inherited parts and properties and choose \" Redefine \". This command makes an identical copy of the original property. Unfortunately, this way the EA forgets that the property is a part property and there is know way to set it. Note that the \" Redefine \" command of the EA is not related to the UML's redefine relation. To model that that a property (or port) redefines another property than select the propety and in the Preferences window you can select the redefined property. After this step the redefined property automatically appears in the BDD. Unfortunately redefined ports cannot be visualized and anonymous ports and properties cannot be redefined.","title":"Composition modeling using Enterprise Architect"},{"location":"composition-modeling-guide/#containment-modeling","text":"Check that the template package is configured in the \" Settings/Settings/Project Template Package... \" Create a BDD and define some blocks using the Toolbox. The new blocks will appear in the Browser. Define the composition between the components using the \" Part Association \" relation tool in the Toolbox. This way you can create part properties of the blocks. You may use the \"Shared Association\" or the \" Reference Association \" tools to create reference properties of the blocks. The new properties will appear in the Browser and in the \" Part/Properties \" tab of the \" Features \" window (if you select the block). Define the name and the multiplicity of the part and reference properties in the \" Source \" tab of the Properties window.","title":"Containment modeling"},{"location":"composition-modeling-guide/#modeling-ports","text":"It is advised to define the ports of the blocks in the BDD. You may use the Browser and the Features windows to create ports but the usage of BDD make the process much more convinient. You can add the \" Port \", \" Proxy Port \" and \" Full Port \" tools to add different ports to the Blocks. The newly created port will appear in the Browser and in the \" Interaction Points \" tab of the \" Features \" window (if you select the block). You can set the Name, the Stereotypes, the Multiplicity, the Conjugated attribute and the Type of the ports in the Preferences window. If the type of the port contain flow properties then an arrow appears in the ports in accordance with the direction of the flow properties. In BDDs you can easily copy ports (and another modling elements) if you press CTRL and pull the port from one block to another. Then you may change the name and conjugated attribute of the ports. If a port is conjugated then the arrow of the port (if it has any) changes direction. You may change the apparance of the diagram if you delete visually the ports and turn on the visibility of the ports compartments in the \" Compartments \" tab of the Preferences window (if you select nothing and click anywhere on the diagram). You may set the style of the relations to \" Tree Vertical \", by right clicking the relations. You can accelerate this process if you set the style of a relation, right click on the relation and use the \"Apply Style on Diagram/Connectors of the Same Type\" command.","title":"Modeling ports"},{"location":"composition-modeling-guide/#generalization-and-redefine","text":"Create a BDD and define some blocks and generalization between them using the Toolbox. If a block generalizes another block then you can copy the parts and ports of the generalized block can be copied to the new block using the Features tab. Turn on the \"Show Inherited\" property and right click on the inherited parts and properties and choose \" Redefine \". This command makes an identical copy of the original property. Unfortunately, this way the EA forgets that the property is a part property and there is know way to set it. Note that the \" Redefine \" command of the EA is not related to the UML's redefine relation. To model that that a property (or port) redefines another property than select the propety and in the Preferences window you can select the redefined property. After this step the redefined property automatically appears in the BDD. Unfortunately redefined ports cannot be visualized and anonymous ports and properties cannot be redefined.","title":"Generalization and redefine"},{"location":"data-and-interface-modeling-guide/","text":"Data and information modeling Download ISO 80000 library The ISO 80000 is an international standard, which defines numeous physicalquantities and units such as, force, distance, time, temperatures. The physical quantities and units are organized into 10 chapters. The OMG published in XML format the SysML model of the units and quantities of the ISO 80000 standard. Create a package and right click on the package and select \" Add a Model using Wizard... \". In the SysML1.5 Libraries category select \" ISO 80000 Library (Downloaded) \" and press \" Create Model(s) \". Sometimes the library cannot be downloaded due to server issues of the OMG. If the server issue persists, then download the .xml from our Teams and import it similarly to the import of the template package (see the generic EA guide). Create units and quantity kinds Create a BDD and define some units and quantity kinds using the Toolbox. Set the attribute values of the quantity kinds and units in the Run States tab of the Preferences window. Value types, enums and signals Create a BDD and add some value types, enums and signals using the Toolbox. Select the quantity kind and unit of the value types in the Preferences window by clicking on the three dot icon near the attributes. Define the literals of the enums in the Attributes tab of the Features window, by writing the name of the literal in the New Attribute field. Define the attributes of the signals in the Attributes tab of the Features window, by writing the name of the attribute in the New Attribute field. Set the type and the visibility of the attribute near the name of the attribute. Interface modeling Create a BDD and add some interfaces and interface blocks using the Toolbox. Add signal receptions to the interfaces in the Receptions tab of the Features window by clicking on the three dot icon near the New Reception label. You can add flow properties to the interface blocks three ways: drag a value type from the Browser and drop it over the interface block and select the SysML1.4::FlowProperty in the \" Drop as \" field, and click \" OK \", then rename the property; select the interface block and in the \" Parts/Properties \" field right click and select \" Add New \", then fill the form in the pop-up window and press \" OK \"; use the Toolbar to create a flow property, and set the name, the type and the direction of the flow property in the Preferences window.","title":"Data and interface modeling using Enterprise Architect"},{"location":"data-and-interface-modeling-guide/#data-and-information-modeling","text":"","title":"Data and information modeling"},{"location":"data-and-interface-modeling-guide/#download-iso-80000-library","text":"The ISO 80000 is an international standard, which defines numeous physicalquantities and units such as, force, distance, time, temperatures. The physical quantities and units are organized into 10 chapters. The OMG published in XML format the SysML model of the units and quantities of the ISO 80000 standard. Create a package and right click on the package and select \" Add a Model using Wizard... \". In the SysML1.5 Libraries category select \" ISO 80000 Library (Downloaded) \" and press \" Create Model(s) \". Sometimes the library cannot be downloaded due to server issues of the OMG. If the server issue persists, then download the .xml from our Teams and import it similarly to the import of the template package (see the generic EA guide).","title":"Download ISO 80000 library"},{"location":"data-and-interface-modeling-guide/#create-units-and-quantity-kinds","text":"Create a BDD and define some units and quantity kinds using the Toolbox. Set the attribute values of the quantity kinds and units in the Run States tab of the Preferences window.","title":"Create units and quantity kinds"},{"location":"data-and-interface-modeling-guide/#value-types-enums-and-signals","text":"Create a BDD and add some value types, enums and signals using the Toolbox. Select the quantity kind and unit of the value types in the Preferences window by clicking on the three dot icon near the attributes. Define the literals of the enums in the Attributes tab of the Features window, by writing the name of the literal in the New Attribute field. Define the attributes of the signals in the Attributes tab of the Features window, by writing the name of the attribute in the New Attribute field. Set the type and the visibility of the attribute near the name of the attribute.","title":"Value types, enums and signals"},{"location":"data-and-interface-modeling-guide/#interface-modeling","text":"Create a BDD and add some interfaces and interface blocks using the Toolbox. Add signal receptions to the interfaces in the Receptions tab of the Features window by clicking on the three dot icon near the New Reception label. You can add flow properties to the interface blocks three ways: drag a value type from the Browser and drop it over the interface block and select the SysML1.4::FlowProperty in the \" Drop as \" field, and click \" OK \", then rename the property; select the interface block and in the \" Parts/Properties \" field right click and select \" Add New \", then fill the form in the pop-up window and press \" OK \"; use the Toolbar to create a flow property, and set the name, the type and the direction of the flow property in the Preferences window.","title":"Interface modeling"},{"location":"first-project/","text":"Create project Click on \" Create New \" in the Start Page In the pop-up window name the file and choose proper extension. For shared projects \" *.qea \" extension is strongly advised, and click on save. The project is created. In the Start Page you can easily switch between the recently created projects. You can open existing projects, by clicking on Open Project in the Start Page. Create package structure You can create a root-level package by right clicking in the Browser and choosing \" Add Root Node... \". Name the root-level package and click OK. You can add packages to root-level packages by clicking on \" Add Package \" in the \" Design \" menu tab. In the pop-up window name the package and click on OK. Except root-level packages you can add a subpackage, by either: right click the package in the Browser and choose \" Add a package \", or select the package in the Browser and press CTRL+N and select \" Add a package \" Create diagrams Right click on a any (not root-level) package in the browser (or select the package and press CTRL+N) and choose \" Add Diagram \". In the pop-up window select the type of the diagram and name it. Finally press OK. The new diagram opens automatically and the EA loads all the relevant model creation tools into the toolbox. You can click on any tools in the toolbox to create new elements. You can add additional model creation tools to the toolbox by clicking on the menu button in the right upper corner of the toolbox and choose \" Toolbox Visibility \". Now you can select which groups of tools will be always visible. It isstrongly advised to select \" SysML Common \" and \" SysML Model \".","title":"First steps using Enterprise Architect"},{"location":"first-project/#create-project","text":"Click on \" Create New \" in the Start Page In the pop-up window name the file and choose proper extension. For shared projects \" *.qea \" extension is strongly advised, and click on save. The project is created. In the Start Page you can easily switch between the recently created projects. You can open existing projects, by clicking on Open Project in the Start Page.","title":"Create project"},{"location":"first-project/#create-package-structure","text":"You can create a root-level package by right clicking in the Browser and choosing \" Add Root Node... \". Name the root-level package and click OK. You can add packages to root-level packages by clicking on \" Add Package \" in the \" Design \" menu tab. In the pop-up window name the package and click on OK. Except root-level packages you can add a subpackage, by either: right click the package in the Browser and choose \" Add a package \", or select the package in the Browser and press CTRL+N and select \" Add a package \"","title":"Create package structure"},{"location":"first-project/#create-diagrams","text":"Right click on a any (not root-level) package in the browser (or select the package and press CTRL+N) and choose \" Add Diagram \". In the pop-up window select the type of the diagram and name it. Finally press OK. The new diagram opens automatically and the EA loads all the relevant model creation tools into the toolbox. You can click on any tools in the toolbox to create new elements. You can add additional model creation tools to the toolbox by clicking on the menu button in the right upper corner of the toolbox and choose \" Toolbox Visibility \". Now you can select which groups of tools will be always visible. It isstrongly advised to select \" SysML Common \" and \" SysML Model \".","title":"Create diagrams"},{"location":"ftedit/","text":"Introduction FTEdit is an open source fault tree editor tool for static fault trees. Installation The repository of the tool can be found here . For Linux installation follow the instructions found in the README, for Windows installation use precompiled binaries . Modeling Fault Trees You can select Gates from toolbar. Top Event is not an option here, so select an Or Gate as the root of the Fault Tree. You can edit the properties of the gates in the Right Click -> Properties menu or with the Ctrl+P shortcut. Use meaningful names and descriptions! You can add further children to gates after selecting them. To add a Basic Event to a gate select the Basic Event from the toolbar and enter the properties window: Right Click -> Properties ( Ctrl+P ). Set the name and the description of the event, then select a distribution from the list or add a new one using the + button. Exponential models can be used to compute the unreliability of a component with exponentially distributed failure time based on its failure rate and the mission time set when executing the analysis. Constant models can be used if the probability of the event is determined outside of FTEdit (e.g. asymptotic availbility is computed using a different formula). Constant can be used for the unreliability computation of exponentials as well by setting the probability to 1-e -\u03bbt . Select the Exponential or the Constant option -> Click on Edit -> Set the name of the distribution and the value . Evaluating Fault Trees To evaluate a Fault Tree select the Top Event and click on the toolbar or use the Ctrl+Shift+E shortcut. Select the Use boolean algebra option and set the Mission Time and the Step . The results can be found in the Project Explorer","title":"FTEdit - Fault Tree Editing tool"},{"location":"ftedit/#introduction","text":"FTEdit is an open source fault tree editor tool for static fault trees.","title":"Introduction"},{"location":"ftedit/#installation","text":"The repository of the tool can be found here . For Linux installation follow the instructions found in the README, for Windows installation use precompiled binaries .","title":"Installation"},{"location":"ftedit/#modeling-fault-trees","text":"You can select Gates from toolbar. Top Event is not an option here, so select an Or Gate as the root of the Fault Tree. You can edit the properties of the gates in the Right Click -> Properties menu or with the Ctrl+P shortcut. Use meaningful names and descriptions! You can add further children to gates after selecting them. To add a Basic Event to a gate select the Basic Event from the toolbar and enter the properties window: Right Click -> Properties ( Ctrl+P ). Set the name and the description of the event, then select a distribution from the list or add a new one using the + button. Exponential models can be used to compute the unreliability of a component with exponentially distributed failure time based on its failure rate and the mission time set when executing the analysis. Constant models can be used if the probability of the event is determined outside of FTEdit (e.g. asymptotic availbility is computed using a different formula). Constant can be used for the unreliability computation of exponentials as well by setting the probability to 1-e -\u03bbt . Select the Exponential or the Constant option -> Click on Edit -> Set the name of the distribution and the value .","title":"Modeling Fault Trees"},{"location":"ftedit/#evaluating-fault-trees","text":"To evaluate a Fault Tree select the Top Event and click on the toolbar or use the Ctrl+Shift+E shortcut. Select the Use boolean algebra option and set the Mission Time and the Step . The results can be found in the Project Explorer","title":"Evaluating Fault Trees"},{"location":"general-modeling-guide/","text":"El\u0151zetes l\u00e9p\u00e9sek Template package be\u00e1ll\u00edt\u00e1sa OK: A SysML diagrammokon alap\u00e9rtelmezetten minden compartment enged\u00e9lyezve van. Ez az\u00e9rt egy hatalmas probl\u00e9ma mert ha k\u00e9sz\u00edtesz egy t\u00f6k\u00e9letes diagrammot \u00e9s k\u00e9s\u0151bb a diagrammokon l\u00e9v\u0151 elemeknek \u00faj property-jei lesznek akkor azok alap\u00e9rtelmezetten megjelennek a compartment-ben \u00e9s az \u00f6sszes elem \u00e1tm\u00e9retez\u0151dik. A compartment-eket csak egy speci\u00e1lisan elk\u00e9sz\u00edtett tamplate package-dzsel lehet megakad\u00e1lyozni, amit el\u0151re kidolgoztam. A Publish f\u00fcl\u00f6n v\u00e1laszd ki az Import-n\u00e9l az al\u00e1bbi linkr\u0151l let\u0151lt\u00f6tt XMI File\u2026-t ( link ). A felugr\u00f3 ablakban v\u00e1laszd ki a kiexport\u00e1lt template package-ta Filename mez\u0151ben \u00e9s nyomd meg az import-ot. Az import sor\u00e1n felugrik egy ablak ahol Yes-t kell v\u00e1lasztani. A Settings f\u00fcl\u00f6n, v\u00e1laszd ki a Project Template Package men\u00fcpontot. V\u00e1laszd ki a beimport\u00e1lt template package-t \u00e9s nyomd meg az OK-t. Start f\u00fcl\u00f6n a Preferences men\u00fcpontban az Other preferences-n\u00e9l a felugr\u00f3 ablakban \u00e1ll\u00edtsd be a Auto-resize marks diagram \u2019dirty\u2019-t ugyanis ezzel a l\u00e9p\u00e9ssel az autoresize CTRL-Z-vel (nem minden esetben, de) vissza\u00e1ll\u00edthat\u00f3 Ablakok be\u00e1ll\u00edt\u00e1sa A programoz\u00f3i k\u00f6rnyezetekhez hasonl\u00f3an itt is sok f\u00e9le ablak van, ahol mindenf\u00e9le be\u00e1ll\u00edt\u00e1st tal\u00e1ltokaz al\u00e1bbi \u00f6t ablak a legfontosabb: * Browser : itt lehet a modell strukt\u00far\u00e1j\u00e1ban navig\u00e1lni * Toolbox : az \u00e9ppen szerkesztett diagrammhoz val\u00f3 paletta * Features : az \u00e9ppen kiv\u00e1lasztott modell elem \u00e1ltal tartalmazott m\u00e1s modell elemek \u00f6sszefoglal\u00f3 ablakja * Notes : az \u00e9ppen kiv\u00e1lasztott modell elemhez note-ot lehet vele tenni * Properties : az \u00e9ppen kiv\u00e1lasztott modell elem alapvet\u0151 tulajdons\u00e1gait tudjuk be\u00e1ll\u00edtani, itt sokszor az elem t\u00edpus\u00e1t\u00f3l f\u00fcgg\u0151en t\u00f6bb tab is van, a tab-ok k\u00f6z\u00f6tt sokszor v\u00e9letlenszer\u0171en vannak sz\u00e9tsz\u00f3rva a be\u00e1ll\u00edt\u00e1sok ez\u00e9rt \u00e9rdemes mindegyiket megn\u00e9zni Ablakok be\u00e1ll\u00edt\u00e1s\u00e1nak l\u00e9p\u00e9sei: 1. A Start f\u00fcl\u00f6n a Portals men\u00fcpontban ki kell v\u00e1lasztani a Windows-t 2. A felugr\u00f3 ablakban ki kell v\u00e1lasztani a azokat az ablakokat amiket szeretn\u00e9nk haszn\u00e1lni (\u00e9rdemes k\u00eds\u00e9rletezni). 3. Az ablakokat a tetej\u00fckn\u00e9l fogva mozgassuk a nek\u00fcnk tetsz\u0151 helyre. 4. A Portals ablakot t\u00fcntess\u00fck el \u00fagy, hogy a tetej\u00e9n jobb klikkel\u00fcnk \u00e9s a hide-t v\u00e1lasztjuk. N\u00e9zet be\u00e1ll\u00edt\u00e1sa A k\u00fcl\u00f6nb\u00f6z\u0151 n\u00e9zetek seg\u00edts\u00e9g\u00e9vel a l\u00e9trehozand\u00f3 elemek \u00e9s diagrammok t\u00edpusainak k\u00f6r\u00e9t le tudjuk sz\u0171k\u00edteni att\u00f3l f\u00fcgg\u0151en, hogy milyen modellez\u00e9si feladatot kell elv\u00e9gezn\u00fcnk. Ennek motiv\u00e1ci\u00f3ja, hogy az EA-ban nagyon sok f\u00e9le UML alap\u00fa modellez\u00e9si nyelv \u00e9rhet\u0151 el \u00e9s ha p\u00e9ld\u00e1ul rendszer modellez\u00e9st akarunk csin\u00e1lni akkor tipikusan SysML-t akarunk haszn\u00e1lni nem pedig BPML-t vagy UML-t. Kattints a men\u00fc ikonra a toolbox jobb fels\u0151 sark\u00e1ban \u00e9s v\u00e1laszd ki a Change Perspective-t. Ezut\u00e1n v\u00e1laszd ki a Systems Engineering men\u00fcpontban a SysML-t. Haszn\u00e1lati tippek Hasznos shortcut-ok Az EA hat\u00e9kony haszn\u00e1lat\u00e1hoz elengedhetetlen a legfontosabb gyorsbillenty\u0171k ismerete. A legfontosabb gyorsbillenty\u0171k haszn\u00e1lat\u00e1val jelent\u0151sen gyors\u00edthatjuk a modellez\u00e9s folyamat\u00e1t. A legfontosabb gyorsbillenty\u0171k az al\u00e1bbiak: Del : t\u00f6rl\u00e9s \u00e9s v\u00e1laszt\u00e1s vizu\u00e1lis \u00e9s val\u00f3di t\u00f6rl\u00e9s k\u00f6z\u00f6tt, ha vizu\u00e1lis a t\u00f6rl\u00e9s, csak a diagrammon lesz v\u00e1ltoz\u00e1s, a m\u00f6g\u00f6ttes modellelem megmarad CTRL+Del : val\u00f3di t\u00f6rl\u00e9s, nem csak a diagrammon lesz v\u00e1ltoz\u00e1s, a m\u00f6g\u00f6ttes modellelem is t\u00f6rl\u0151dik CTRL+C \u00e9s SHIFT+Insert : vizu\u00e1lis copy-paste, csak a diagrammon lesz v\u00e1ltoz\u00e1s, a m\u00f6g\u00f6ttes modellelem v\u00e1ltozatlan CTRL+C \u00e9s CTRL+SHIFT+V : val\u00f3di copy-paste, nem csak a diagrammon lesz v\u00e1ltoz\u00e1s, a m\u00f6g\u00f6ttes modellelem is megv\u00e1ltozik CTRL+N : \u00faj elem/diagram l\u00e9trehoz\u00e1sa CTRL+M : \u00faj model elem hozz\u00e1ad\u00e1sa a kiv\u00e1lasztott package-hez CTRL+SHIFT+Y : kiv\u00e1lasztott modell elemen a compartment-ek megjelen\u00e9s\u00e9nek enged\u00e9lyeztet\u00e9se CTRL+Z : Vizu\u00e1lis undo (sajnos val\u00f3di undo nincs EA-ban) AltGr : A kiv\u00e1lasztott elemhez ugrik a Browser-ben AltGr+G : A kiv\u00e1lasztott porty/port/attributy t\u00edpus\u00e1hoz ugrik a model explorer-ben F2 : kiv\u00e1lasztott modell elem \u00e1tnevez\u00e9se F3 : a legutolj\u00e1ra l\u00e9trehozott kapcsolat t\u00edpus\u00e1b\u00f3l lerakni m\u00e9g egyet (p\u00e9ld\u00e1ul ha utolj\u00e1ra generalization kapcsolatot tett\u00e9l egy BDD-ra akkor ezzel a paranccsal m\u00e9 egy generalization-t tudsz bek\u00f6tni) SHIFT+F3 : a legutolj\u00e1ra l\u00e9trehozott elem t\u00edpus\u00e1b\u00f3l lerakni m\u00e9g egyet (p\u00e9ld\u00e1ul ha utolj\u00e1ra block-ot tett\u00e9l egy BDD-ra akkor ezzel a paranccsal m\u00e9 egy block-ot tudsz lerakni) Shortcut-ok be\u00e1ll\u00edt\u00e1sa A Start f\u00fcl\u00f6n a Preferences men\u00fcpontban kattints az Other Options-ra A felugr\u00f3 ablakban menj r\u00e1 a Keyboard men\u00fcpontra \u00e9s kateg\u00f3ri\u00e1nk\u00e9nt megn\u00e9zheted, hogy milyen parancsokat lehet gyorsbillenty\u0171vel el\u00e9rni. A Press New Shortcut Key mez\u0151bekattintva a k\u00edv\u00e1nt kombin\u00e1ci\u00f3t lenyomva, majd az Assign gombra r\u00e1kattintva lehet \u00faj billenty\u0171 kombin\u00e1ci\u00f3ra \u00e1tteni a parancsot. Tippek a diagram rajzol\u00e1s\u00e1hoz Minden elem a diagrammon jelen nagyj\u00e1b\u00f3l k\u00e9tszer akkora, mint minim\u00e1lisan sz\u00fcks\u00e9ges. A t\u00fal kicsi modell elemeket az EA automatikusan \u00e1tm\u00e9retezi. F\u0151leg a kicsi magass\u00e1g a kritikus. \u00c9rdemes el\u0151sz\u00f6r BDD diagrammot k\u00e9sz\u00edteni \u00e9s azokon el\u0151re mindent specifik\u00e1lni amire k\u00e9s\u0151bb sz\u00fcks\u00e9g lehet. A diagrammokat MINDIG \u00fagy kell l\u00e9tre hozni, hogy a Browser-ben a tartalmaz\u00f3 modell elem f\u00f6l\u00e9 h\u00fazod az egeret \u00e9s vagy jobb klikk \u00e9s a \u201eNew diagram\u201d kiv\u00e1laszt\u00e1sa CTRL+N \u00e9s a \u201eNew diagram\u201d kiv\u00e1laszt\u00e1sa NE helyezz BDD-re oszt\u00e1lyt mert a diagram layout teljesen felborul Ha egy elemet beh\u00fazol a Browser-b\u0151l a diagrammra akkor felugrik egy ablak, hogy Link/Property/Instance/Port/stb\u2026 form\u00e1j\u00e1ban szeretn\u00e9d-e betenni a diagrammra. Ez nagyon k\u00e9nyelmes \u00e9s gyors m\u00f3dja a property-k, port-ok,\u2026 l\u00e9trehoz\u00e1s\u00e1nak. Ha valamilyen modell elemet mozgatsz \u00e9s lenyomod a CTRL-t akkor azt a modell elemet modell szerint lem\u00e1solja A Layout f\u00fcl\u00f6n a \"Diagram Layout/Auto Route\" parancs el\u00e9g j\u00f3l be\u00e1ll\u00edtja a rel\u00e1ci\u00f3k vonalvezet\u00e9s\u00e9t \u00e9srouting-j\u00e1t adiagrammokon. Ha kijel\u00f6lsz egy rel\u00e1ci\u00f3t akkor jobb klikk \"Line Style\" men\u00fcpontban tudod be\u00e1ll\u00edtani, hogy egyenes, sz\u00f6gletes vagy cikk-cakkos vonalvezet\u00e9si st\u00edlust szeretn\u00e9l. Ha jobb klikk ut\u00e1n az \"Apply Line Style on Diagram\"-t v\u00e1lasztod akkor a diarammon az \u00f6sszes azonos t\u00edpus\u00fa rel\u00e1ci\u00f3 st\u00edlus\u00e1t be tudod \u00e1ll\u00edtaniegyszerre.","title":"General introduction to modeling in Enterprise Architect"},{"location":"general-modeling-guide/#elozetes-lepesek","text":"","title":"El\u0151zetes l\u00e9p\u00e9sek"},{"location":"general-modeling-guide/#template-package-beallitasa","text":"OK: A SysML diagrammokon alap\u00e9rtelmezetten minden compartment enged\u00e9lyezve van. Ez az\u00e9rt egy hatalmas probl\u00e9ma mert ha k\u00e9sz\u00edtesz egy t\u00f6k\u00e9letes diagrammot \u00e9s k\u00e9s\u0151bb a diagrammokon l\u00e9v\u0151 elemeknek \u00faj property-jei lesznek akkor azok alap\u00e9rtelmezetten megjelennek a compartment-ben \u00e9s az \u00f6sszes elem \u00e1tm\u00e9retez\u0151dik. A compartment-eket csak egy speci\u00e1lisan elk\u00e9sz\u00edtett tamplate package-dzsel lehet megakad\u00e1lyozni, amit el\u0151re kidolgoztam. A Publish f\u00fcl\u00f6n v\u00e1laszd ki az Import-n\u00e9l az al\u00e1bbi linkr\u0151l let\u0151lt\u00f6tt XMI File\u2026-t ( link ). A felugr\u00f3 ablakban v\u00e1laszd ki a kiexport\u00e1lt template package-ta Filename mez\u0151ben \u00e9s nyomd meg az import-ot. Az import sor\u00e1n felugrik egy ablak ahol Yes-t kell v\u00e1lasztani. A Settings f\u00fcl\u00f6n, v\u00e1laszd ki a Project Template Package men\u00fcpontot. V\u00e1laszd ki a beimport\u00e1lt template package-t \u00e9s nyomd meg az OK-t. Start f\u00fcl\u00f6n a Preferences men\u00fcpontban az Other preferences-n\u00e9l a felugr\u00f3 ablakban \u00e1ll\u00edtsd be a Auto-resize marks diagram \u2019dirty\u2019-t ugyanis ezzel a l\u00e9p\u00e9ssel az autoresize CTRL-Z-vel (nem minden esetben, de) vissza\u00e1ll\u00edthat\u00f3","title":"Template package be\u00e1ll\u00edt\u00e1sa"},{"location":"general-modeling-guide/#ablakok-beallitasa","text":"A programoz\u00f3i k\u00f6rnyezetekhez hasonl\u00f3an itt is sok f\u00e9le ablak van, ahol mindenf\u00e9le be\u00e1ll\u00edt\u00e1st tal\u00e1ltokaz al\u00e1bbi \u00f6t ablak a legfontosabb: * Browser : itt lehet a modell strukt\u00far\u00e1j\u00e1ban navig\u00e1lni * Toolbox : az \u00e9ppen szerkesztett diagrammhoz val\u00f3 paletta * Features : az \u00e9ppen kiv\u00e1lasztott modell elem \u00e1ltal tartalmazott m\u00e1s modell elemek \u00f6sszefoglal\u00f3 ablakja * Notes : az \u00e9ppen kiv\u00e1lasztott modell elemhez note-ot lehet vele tenni * Properties : az \u00e9ppen kiv\u00e1lasztott modell elem alapvet\u0151 tulajdons\u00e1gait tudjuk be\u00e1ll\u00edtani, itt sokszor az elem t\u00edpus\u00e1t\u00f3l f\u00fcgg\u0151en t\u00f6bb tab is van, a tab-ok k\u00f6z\u00f6tt sokszor v\u00e9letlenszer\u0171en vannak sz\u00e9tsz\u00f3rva a be\u00e1ll\u00edt\u00e1sok ez\u00e9rt \u00e9rdemes mindegyiket megn\u00e9zni Ablakok be\u00e1ll\u00edt\u00e1s\u00e1nak l\u00e9p\u00e9sei: 1. A Start f\u00fcl\u00f6n a Portals men\u00fcpontban ki kell v\u00e1lasztani a Windows-t 2. A felugr\u00f3 ablakban ki kell v\u00e1lasztani a azokat az ablakokat amiket szeretn\u00e9nk haszn\u00e1lni (\u00e9rdemes k\u00eds\u00e9rletezni). 3. Az ablakokat a tetej\u00fckn\u00e9l fogva mozgassuk a nek\u00fcnk tetsz\u0151 helyre. 4. A Portals ablakot t\u00fcntess\u00fck el \u00fagy, hogy a tetej\u00e9n jobb klikkel\u00fcnk \u00e9s a hide-t v\u00e1lasztjuk.","title":"Ablakok be\u00e1ll\u00edt\u00e1sa"},{"location":"general-modeling-guide/#nezet-beallitasa","text":"A k\u00fcl\u00f6nb\u00f6z\u0151 n\u00e9zetek seg\u00edts\u00e9g\u00e9vel a l\u00e9trehozand\u00f3 elemek \u00e9s diagrammok t\u00edpusainak k\u00f6r\u00e9t le tudjuk sz\u0171k\u00edteni att\u00f3l f\u00fcgg\u0151en, hogy milyen modellez\u00e9si feladatot kell elv\u00e9gezn\u00fcnk. Ennek motiv\u00e1ci\u00f3ja, hogy az EA-ban nagyon sok f\u00e9le UML alap\u00fa modellez\u00e9si nyelv \u00e9rhet\u0151 el \u00e9s ha p\u00e9ld\u00e1ul rendszer modellez\u00e9st akarunk csin\u00e1lni akkor tipikusan SysML-t akarunk haszn\u00e1lni nem pedig BPML-t vagy UML-t. Kattints a men\u00fc ikonra a toolbox jobb fels\u0151 sark\u00e1ban \u00e9s v\u00e1laszd ki a Change Perspective-t. Ezut\u00e1n v\u00e1laszd ki a Systems Engineering men\u00fcpontban a SysML-t.","title":"N\u00e9zet be\u00e1ll\u00edt\u00e1sa"},{"location":"general-modeling-guide/#hasznalati-tippek","text":"","title":"Haszn\u00e1lati tippek"},{"location":"general-modeling-guide/#hasznos-shortcut-ok","text":"Az EA hat\u00e9kony haszn\u00e1lat\u00e1hoz elengedhetetlen a legfontosabb gyorsbillenty\u0171k ismerete. A legfontosabb gyorsbillenty\u0171k haszn\u00e1lat\u00e1val jelent\u0151sen gyors\u00edthatjuk a modellez\u00e9s folyamat\u00e1t. A legfontosabb gyorsbillenty\u0171k az al\u00e1bbiak: Del : t\u00f6rl\u00e9s \u00e9s v\u00e1laszt\u00e1s vizu\u00e1lis \u00e9s val\u00f3di t\u00f6rl\u00e9s k\u00f6z\u00f6tt, ha vizu\u00e1lis a t\u00f6rl\u00e9s, csak a diagrammon lesz v\u00e1ltoz\u00e1s, a m\u00f6g\u00f6ttes modellelem megmarad CTRL+Del : val\u00f3di t\u00f6rl\u00e9s, nem csak a diagrammon lesz v\u00e1ltoz\u00e1s, a m\u00f6g\u00f6ttes modellelem is t\u00f6rl\u0151dik CTRL+C \u00e9s SHIFT+Insert : vizu\u00e1lis copy-paste, csak a diagrammon lesz v\u00e1ltoz\u00e1s, a m\u00f6g\u00f6ttes modellelem v\u00e1ltozatlan CTRL+C \u00e9s CTRL+SHIFT+V : val\u00f3di copy-paste, nem csak a diagrammon lesz v\u00e1ltoz\u00e1s, a m\u00f6g\u00f6ttes modellelem is megv\u00e1ltozik CTRL+N : \u00faj elem/diagram l\u00e9trehoz\u00e1sa CTRL+M : \u00faj model elem hozz\u00e1ad\u00e1sa a kiv\u00e1lasztott package-hez CTRL+SHIFT+Y : kiv\u00e1lasztott modell elemen a compartment-ek megjelen\u00e9s\u00e9nek enged\u00e9lyeztet\u00e9se CTRL+Z : Vizu\u00e1lis undo (sajnos val\u00f3di undo nincs EA-ban) AltGr : A kiv\u00e1lasztott elemhez ugrik a Browser-ben AltGr+G : A kiv\u00e1lasztott porty/port/attributy t\u00edpus\u00e1hoz ugrik a model explorer-ben F2 : kiv\u00e1lasztott modell elem \u00e1tnevez\u00e9se F3 : a legutolj\u00e1ra l\u00e9trehozott kapcsolat t\u00edpus\u00e1b\u00f3l lerakni m\u00e9g egyet (p\u00e9ld\u00e1ul ha utolj\u00e1ra generalization kapcsolatot tett\u00e9l egy BDD-ra akkor ezzel a paranccsal m\u00e9 egy generalization-t tudsz bek\u00f6tni) SHIFT+F3 : a legutolj\u00e1ra l\u00e9trehozott elem t\u00edpus\u00e1b\u00f3l lerakni m\u00e9g egyet (p\u00e9ld\u00e1ul ha utolj\u00e1ra block-ot tett\u00e9l egy BDD-ra akkor ezzel a paranccsal m\u00e9 egy block-ot tudsz lerakni)","title":"Hasznos shortcut-ok"},{"location":"general-modeling-guide/#shortcut-ok-beallitasa","text":"A Start f\u00fcl\u00f6n a Preferences men\u00fcpontban kattints az Other Options-ra A felugr\u00f3 ablakban menj r\u00e1 a Keyboard men\u00fcpontra \u00e9s kateg\u00f3ri\u00e1nk\u00e9nt megn\u00e9zheted, hogy milyen parancsokat lehet gyorsbillenty\u0171vel el\u00e9rni. A Press New Shortcut Key mez\u0151bekattintva a k\u00edv\u00e1nt kombin\u00e1ci\u00f3t lenyomva, majd az Assign gombra r\u00e1kattintva lehet \u00faj billenty\u0171 kombin\u00e1ci\u00f3ra \u00e1tteni a parancsot.","title":"Shortcut-ok be\u00e1ll\u00edt\u00e1sa"},{"location":"general-modeling-guide/#tippek-a-diagram-rajzolasahoz","text":"Minden elem a diagrammon jelen nagyj\u00e1b\u00f3l k\u00e9tszer akkora, mint minim\u00e1lisan sz\u00fcks\u00e9ges. A t\u00fal kicsi modell elemeket az EA automatikusan \u00e1tm\u00e9retezi. F\u0151leg a kicsi magass\u00e1g a kritikus. \u00c9rdemes el\u0151sz\u00f6r BDD diagrammot k\u00e9sz\u00edteni \u00e9s azokon el\u0151re mindent specifik\u00e1lni amire k\u00e9s\u0151bb sz\u00fcks\u00e9g lehet. A diagrammokat MINDIG \u00fagy kell l\u00e9tre hozni, hogy a Browser-ben a tartalmaz\u00f3 modell elem f\u00f6l\u00e9 h\u00fazod az egeret \u00e9s vagy jobb klikk \u00e9s a \u201eNew diagram\u201d kiv\u00e1laszt\u00e1sa CTRL+N \u00e9s a \u201eNew diagram\u201d kiv\u00e1laszt\u00e1sa NE helyezz BDD-re oszt\u00e1lyt mert a diagram layout teljesen felborul Ha egy elemet beh\u00fazol a Browser-b\u0151l a diagrammra akkor felugrik egy ablak, hogy Link/Property/Instance/Port/stb\u2026 form\u00e1j\u00e1ban szeretn\u00e9d-e betenni a diagrammra. Ez nagyon k\u00e9nyelmes \u00e9s gyors m\u00f3dja a property-k, port-ok,\u2026 l\u00e9trehoz\u00e1s\u00e1nak. Ha valamilyen modell elemet mozgatsz \u00e9s lenyomod a CTRL-t akkor azt a modell elemet modell szerint lem\u00e1solja A Layout f\u00fcl\u00f6n a \"Diagram Layout/Auto Route\" parancs el\u00e9g j\u00f3l be\u00e1ll\u00edtja a rel\u00e1ci\u00f3k vonalvezet\u00e9s\u00e9t \u00e9srouting-j\u00e1t adiagrammokon. Ha kijel\u00f6lsz egy rel\u00e1ci\u00f3t akkor jobb klikk \"Line Style\" men\u00fcpontban tudod be\u00e1ll\u00edtani, hogy egyenes, sz\u00f6gletes vagy cikk-cakkos vonalvezet\u00e9si st\u00edlust szeretn\u00e9l. Ha jobb klikk ut\u00e1n az \"Apply Line Style on Diagram\"-t v\u00e1lasztod akkor a diarammon az \u00f6sszes azonos t\u00edpus\u00fa rel\u00e1ci\u00f3 st\u00edlus\u00e1t be tudod \u00e1ll\u00edtaniegyszerre.","title":"Tippek a diagram rajzol\u00e1s\u00e1hoz"},{"location":"lab1/","text":"Models in Version Control The initial model in this repository comes from the ESPD-EDM repository, licensed under the EUPL-1.2 license . For more information, see the Technical Documentation . Part of this file has been adapted from the EU TED Portal . To download the initial model, click here . This laboratory exercise assumes pairs of people working together. Some steps refer to Person A or Person B . Ensure you agree on which one you are! Setup Person A : Create a private repository on GitHub. Tick Add a README file so that the repository is initialized properly. Invite Person B as a collaborator. Add the linked model file ( espd.qeax ) to the repository, either via the web interface, or SmartGit. Both people : clone the repository in SmartGit. Ensure you both can open the model file using Enterprise Architect. Introduction The European Single Procurement Document (ESPD) is a mandatory electronic form, in two parts, used by buyers to assess the suitability of suppliers tendering in a public procurement procedure. The model provided here showcases the ESPD Exchange Data Model (ESPD-EDM) to help member states and commercial entities create an ESPD service. Your tasks during this exercise will cover the following: Create some (mock) documentation about the data model Modify part of the data model and merge the modifications via the GitHub Flow Accept an incoming pull request and solve merge conflicts within the model file ( Optional ) Create an activity diagram that showcases a possible flow of information using the ESPD data model. Creating Documentation Throughout this subject, we will primarily grade documentation , never the model file itself. Good documentation is self-contained, includes good quality pictures of relevant parts of the model, alongside engineering decisions and explanations of the solution. DO: Create a new file in the repository, called Documentation.md . Using GitHub Markdown , include diagram renders in the document using the image syntax. You may exclude diagrams that have no meaning (such as the LostAndFound diagram). Also try and include some descriptions on what each diagram represents. The resources linked at the top of this file can help you determine their purpose. Do not overdo this step, a few sentences are more than enough. Model Change and 2-Way Merge Open espd.qeax in Enterprise Architect if you haven't done so already. Next, locate cac::QualificationApplicationRequest either in the model hierarchy or on one of the diagrams. We want to change this element so that issuetime is not optional, and previousversionid may contain any number of entries. We also want to add a child class, cac::SpecialQualificationApplicationRequest , inheriting from this base, to allow specialization later on. DO : Person A only : Change the multiplicities of these attributes to the desired values outlined above, create the child class on the diagram where QualificationApplicationRequest was found, and open a PR from a feature branch towards main . Do not yet merge. Person B only : Change the multiplicity of issuetime to 2..2 , and open a PR from a feature branch towards main . Do not yet merge. Both people : Inspect each other's pull requests, both on GitHub and in LemonTree (double click the file in SmartGit!) Person A only : Merge your partner's pull request. Do not update your own. This type of merge is called a 2-way merge , because we merge two branches that have not diverged. Therefore, there cannot be any merge conflicts, every change is present on the same (feature branch). This means the model file (which is not a text file) is just overwritten by the version from the feature branch. Had the two branches diverged, this would be a 3-way merge , and git alone could not solve the merge conflicts within this non-text file. Causing a Conflict and 3-Way Merge In this step, we will resolve the merge conflict in the other pull request, using SmartGit/LemonTree. When ready, we will merge the PR. DO : Open SmartGit, checkout main (double-click) then click Pull to pull the changes. Checkout the source branch of the PR, then select main and click merge in the right-click (context) menu. A prompt should appear asking how the merge should be performed. Choose Create Merge-Commit . This will open the merge window, where conflicts have to be dealt with. Double-click the conflicting espd.qeax to open in LemonTree. After LemonTree opens, there are 3 columns in the right partition: \"ours\", \"theirs\", and \"target\". We can see the current feature branch's modifications in the \"ours\" column, the second feature branch's modifications in the \"theirs\" column, and the desired outcome in the \"target\" column. Pick the model elements to keep -- remember the goal of the previous step. Push your local changes to GitHub, and merge the PR. ( Optional ) Creating an Activity Diagram Next, you'll create an activity diagram showcasing how information may flow using the ESPD data model. You can find information in the resources linked above, but you may also assume a simple workflow. The realized process itself will not be graded. DO : Open an issue in the repository, stating the expected behavior (textually). Assign yourself to the issue. Link the pull request to the issue so that when the PR is merged, the issue is automatically closed. Merge the PR. In Enterprise Architect, creating an Activity Diagram can be a bit complicated. Feel free to search online for guides and documentation, such as this one, or our own modeling guide here .","title":"Laboratory Exercise 1"},{"location":"lab1/#models-in-version-control","text":"The initial model in this repository comes from the ESPD-EDM repository, licensed under the EUPL-1.2 license . For more information, see the Technical Documentation . Part of this file has been adapted from the EU TED Portal . To download the initial model, click here . This laboratory exercise assumes pairs of people working together. Some steps refer to Person A or Person B . Ensure you agree on which one you are!","title":"Models in Version Control"},{"location":"lab1/#setup","text":"Person A : Create a private repository on GitHub. Tick Add a README file so that the repository is initialized properly. Invite Person B as a collaborator. Add the linked model file ( espd.qeax ) to the repository, either via the web interface, or SmartGit. Both people : clone the repository in SmartGit. Ensure you both can open the model file using Enterprise Architect.","title":"Setup"},{"location":"lab1/#introduction","text":"The European Single Procurement Document (ESPD) is a mandatory electronic form, in two parts, used by buyers to assess the suitability of suppliers tendering in a public procurement procedure. The model provided here showcases the ESPD Exchange Data Model (ESPD-EDM) to help member states and commercial entities create an ESPD service. Your tasks during this exercise will cover the following: Create some (mock) documentation about the data model Modify part of the data model and merge the modifications via the GitHub Flow Accept an incoming pull request and solve merge conflicts within the model file ( Optional ) Create an activity diagram that showcases a possible flow of information using the ESPD data model.","title":"Introduction"},{"location":"lab1/#creating-documentation","text":"Throughout this subject, we will primarily grade documentation , never the model file itself. Good documentation is self-contained, includes good quality pictures of relevant parts of the model, alongside engineering decisions and explanations of the solution. DO: Create a new file in the repository, called Documentation.md . Using GitHub Markdown , include diagram renders in the document using the image syntax. You may exclude diagrams that have no meaning (such as the LostAndFound diagram). Also try and include some descriptions on what each diagram represents. The resources linked at the top of this file can help you determine their purpose. Do not overdo this step, a few sentences are more than enough.","title":"Creating Documentation"},{"location":"lab1/#model-change-and-2-way-merge","text":"Open espd.qeax in Enterprise Architect if you haven't done so already. Next, locate cac::QualificationApplicationRequest either in the model hierarchy or on one of the diagrams. We want to change this element so that issuetime is not optional, and previousversionid may contain any number of entries. We also want to add a child class, cac::SpecialQualificationApplicationRequest , inheriting from this base, to allow specialization later on. DO : Person A only : Change the multiplicities of these attributes to the desired values outlined above, create the child class on the diagram where QualificationApplicationRequest was found, and open a PR from a feature branch towards main . Do not yet merge. Person B only : Change the multiplicity of issuetime to 2..2 , and open a PR from a feature branch towards main . Do not yet merge. Both people : Inspect each other's pull requests, both on GitHub and in LemonTree (double click the file in SmartGit!) Person A only : Merge your partner's pull request. Do not update your own. This type of merge is called a 2-way merge , because we merge two branches that have not diverged. Therefore, there cannot be any merge conflicts, every change is present on the same (feature branch). This means the model file (which is not a text file) is just overwritten by the version from the feature branch. Had the two branches diverged, this would be a 3-way merge , and git alone could not solve the merge conflicts within this non-text file.","title":"Model Change and 2-Way Merge"},{"location":"lab1/#causing-a-conflict-and-3-way-merge","text":"In this step, we will resolve the merge conflict in the other pull request, using SmartGit/LemonTree. When ready, we will merge the PR. DO : Open SmartGit, checkout main (double-click) then click Pull to pull the changes. Checkout the source branch of the PR, then select main and click merge in the right-click (context) menu. A prompt should appear asking how the merge should be performed. Choose Create Merge-Commit . This will open the merge window, where conflicts have to be dealt with. Double-click the conflicting espd.qeax to open in LemonTree. After LemonTree opens, there are 3 columns in the right partition: \"ours\", \"theirs\", and \"target\". We can see the current feature branch's modifications in the \"ours\" column, the second feature branch's modifications in the \"theirs\" column, and the desired outcome in the \"target\" column. Pick the model elements to keep -- remember the goal of the previous step. Push your local changes to GitHub, and merge the PR.","title":"Causing a Conflict and 3-Way Merge"},{"location":"lab1/#optional-creating-an-activity-diagram","text":"Next, you'll create an activity diagram showcasing how information may flow using the ESPD data model. You can find information in the resources linked above, but you may also assume a simple workflow. The realized process itself will not be graded. DO : Open an issue in the repository, stating the expected behavior (textually). Assign yourself to the issue. Link the pull request to the issue so that when the PR is merged, the issue is automatically closed. Merge the PR. In Enterprise Architect, creating an Activity Diagram can be a bit complicated. Feel free to search online for guides and documentation, such as this one, or our own modeling guide here .","title":"(Optional) Creating an Activity Diagram"},{"location":"old-index/","text":"Papyrus Tutorial Eclipse Papyrus is an industrial-grade open source Model-Based Engineering tool. Eclipse Papyrus has notably been used successfuly in industrial projects and is the base platform for several industrial modeling tools. Project homepage: https://www.eclipse.org/papyrus/ For the tutorial, see links to the left.","title":"Papyrus Tutorial"},{"location":"old-index/#papyrus-tutorial","text":"Eclipse Papyrus is an industrial-grade open source Model-Based Engineering tool. Eclipse Papyrus has notably been used successfuly in industrial projects and is the base platform for several industrial modeling tools. Project homepage: https://www.eclipse.org/papyrus/ For the tutorial, see links to the left.","title":"Papyrus Tutorial"},{"location":"rete-activity/","text":"Diagram creation Inside the Model Explorer windows of Papyrus, right-click the destination package, and choose new diagram / SysML 1.6 Activity Diagram . To rename the diagram, enter some name in the pop-up windows. If everything worked, Papyrus should be showing an empty Activity inside the newly created diagram. Note that as always, Papyrus does not show a diagram header or a diagram frame, which contradicts the SysML standard. Instead, we can think of the activity's boundary as the diagram frame. Creating a simple diagram From the palette to the right, grab an initial and an activity final element, and drop them on inside the main activity's frame. Furthermore, pick control flow from the palette, and connect the two elements. The resulting diagram should look like this: And in the model explorer, the following new elements should be visible (also, you can rename the top-level activity to something more sensible): Adding actions To add an opaque action (i.e., one without a defined inner structure), right-click the top-level activity in the model explorer, and choose Opaque Action from the UML for SysML 1.6 submenu of the context menu. Note that you can duplicate elements in the model explorer using ctrl+c and ctrl+v, so keep a \"template\" opaque action available to avoid having to always select the element from the complicated menu structure. Then, drop the newly create opaque action onto the diagram, break up the connection between the initial and activity final nodes, and insert the opaque action in-between. Even though Papyrus always offers the possibility to add a label to an edge, refrain from using this feature, because diagrams get very complex very fast. An alternative to the solution for adding an opaque action above, is to start drawing an edge from a node, and Papyrus will offer to create a new element. Choose an opaque action here. Adding pins So far, all edges have been control-flow edges. To add object flow as well, we need to define output and input pins on actions (possibly including the top-level activity). To do so, drop an output pin from the palette onto the opaque action created in the previous step. Then, create (in the model explorer) a signal, and add that as the type of the pin. Do not leave pins untyped! Do the same process with an input pin on another opaque action. You can find the input pin under the output pin's drop-down menu. So far, the diagram should like something like this: To connect the two pins, draw an object flow from the palette between them. Notice that even though SysML defines different graphical syntax for the control- and object-flow edges, Papyrus shows them both using the same notation -- be sure which type you use. The diagram will look like this after the connection will have been established: Adding signal-related actions So far, the object flow represented a direct and synchronous communication channel. In SysML, there is an alternative to this: sending and receiving signals. You can find these elements under the Send Signal Action element's drop-down menu in the palette. If you add a send signal action to the diagram, Papyrus prompts you to select which signal to send, or allows you to create one. Choose the previously created signal. Adding a signal type to an accept event action is a bit more complicated, because an event is much more than a signal . So, when you create an accept event action , it does not prompt you to choose a signal, but rather lets you define a trigger in its properties window. As we want to catch signals, choose the SignalEvent option from the Add Event drop-down. First, choose under which element to create the trigger (the most straightforward option is to choose a package). Add a name for the new SignalEvent, and choose the corresponding Signal (the one picked out when creating the send event action ). If everything went well, the new trigger should look like this. These actions above should result in the following diagram. Note that the pins on the send/receive actions are properly typed using the signal. To connect the elements, create object flows again. Interruptible Regions Unfortunately, Papyrus has a bug where an InterruptibleActivityRegion cannot have children. Instead, we can use an Activity from the palette (which would be used to model embedded behavior) and simply name it InterruptibleActivityRegion . We can do the same with an interrupting edge: adding a label asserting its type. Time event creation To let something cancel the accept event action added in the previous steps, let's add a timeout event to the interruptible activity region, which will cancel the wait after some time. Do the same as before by adding an accept event action , but choose TimeEvent from the dropdown on its trigger. Choose the container (a package, as before). You have two choices (do not do both): Name the time expression using the required timing (e.g., \"60 s\"); or choose a literal from the Expr drop-down, and document its unit of measurement (seconds) somewhere, e.g., as a note. Name the time event something sensible, and click OK. Pay attention to the \"Is Relative\" radiobuttons, because this determines whether the time action should be counted from the beginning of model execution (false), or the beginning of node activation (true). This has created an accept event action that waits for some timeout event. However, we cannot see this on the diagram. Even though the previous steps more or less correctly created the timing actions, they do not appear on the diagram. The alternative (and much easier) way is to create an empty TimeEvent trigger, and just use the name of the accept event action to assert the time event's value: Depending on the relative-ness of the timeout event, you can use \"after: or \"at\": All this together should look like this on the diagram: What's still missing, is the activation of the interruptible activity region, for which we can use a fork from the initial node: and also a way for the timeout event to interrupt the interruptible activity region: Notice that a merge node was more suitable for the task (rather than a join), because we want to exit the activity if one of the two inputs become active.","title":"Activity Diagrams Papyrus guidebook"},{"location":"rete-activity/#diagram-creation","text":"Inside the Model Explorer windows of Papyrus, right-click the destination package, and choose new diagram / SysML 1.6 Activity Diagram . To rename the diagram, enter some name in the pop-up windows. If everything worked, Papyrus should be showing an empty Activity inside the newly created diagram. Note that as always, Papyrus does not show a diagram header or a diagram frame, which contradicts the SysML standard. Instead, we can think of the activity's boundary as the diagram frame.","title":"Diagram creation"},{"location":"rete-activity/#creating-a-simple-diagram","text":"From the palette to the right, grab an initial and an activity final element, and drop them on inside the main activity's frame. Furthermore, pick control flow from the palette, and connect the two elements. The resulting diagram should look like this: And in the model explorer, the following new elements should be visible (also, you can rename the top-level activity to something more sensible):","title":"Creating a simple diagram"},{"location":"rete-activity/#adding-actions","text":"To add an opaque action (i.e., one without a defined inner structure), right-click the top-level activity in the model explorer, and choose Opaque Action from the UML for SysML 1.6 submenu of the context menu. Note that you can duplicate elements in the model explorer using ctrl+c and ctrl+v, so keep a \"template\" opaque action available to avoid having to always select the element from the complicated menu structure. Then, drop the newly create opaque action onto the diagram, break up the connection between the initial and activity final nodes, and insert the opaque action in-between. Even though Papyrus always offers the possibility to add a label to an edge, refrain from using this feature, because diagrams get very complex very fast. An alternative to the solution for adding an opaque action above, is to start drawing an edge from a node, and Papyrus will offer to create a new element. Choose an opaque action here.","title":"Adding actions"},{"location":"rete-activity/#adding-pins","text":"So far, all edges have been control-flow edges. To add object flow as well, we need to define output and input pins on actions (possibly including the top-level activity). To do so, drop an output pin from the palette onto the opaque action created in the previous step. Then, create (in the model explorer) a signal, and add that as the type of the pin. Do not leave pins untyped! Do the same process with an input pin on another opaque action. You can find the input pin under the output pin's drop-down menu. So far, the diagram should like something like this: To connect the two pins, draw an object flow from the palette between them. Notice that even though SysML defines different graphical syntax for the control- and object-flow edges, Papyrus shows them both using the same notation -- be sure which type you use. The diagram will look like this after the connection will have been established:","title":"Adding pins"},{"location":"rete-activity/#adding-signal-related-actions","text":"So far, the object flow represented a direct and synchronous communication channel. In SysML, there is an alternative to this: sending and receiving signals. You can find these elements under the Send Signal Action element's drop-down menu in the palette. If you add a send signal action to the diagram, Papyrus prompts you to select which signal to send, or allows you to create one. Choose the previously created signal. Adding a signal type to an accept event action is a bit more complicated, because an event is much more than a signal . So, when you create an accept event action , it does not prompt you to choose a signal, but rather lets you define a trigger in its properties window. As we want to catch signals, choose the SignalEvent option from the Add Event drop-down. First, choose under which element to create the trigger (the most straightforward option is to choose a package). Add a name for the new SignalEvent, and choose the corresponding Signal (the one picked out when creating the send event action ). If everything went well, the new trigger should look like this. These actions above should result in the following diagram. Note that the pins on the send/receive actions are properly typed using the signal. To connect the elements, create object flows again.","title":"Adding signal-related actions"},{"location":"rete-activity/#interruptible-regions","text":"Unfortunately, Papyrus has a bug where an InterruptibleActivityRegion cannot have children. Instead, we can use an Activity from the palette (which would be used to model embedded behavior) and simply name it InterruptibleActivityRegion . We can do the same with an interrupting edge: adding a label asserting its type.","title":"Interruptible Regions"},{"location":"rete-activity/#time-event-creation","text":"To let something cancel the accept event action added in the previous steps, let's add a timeout event to the interruptible activity region, which will cancel the wait after some time. Do the same as before by adding an accept event action , but choose TimeEvent from the dropdown on its trigger. Choose the container (a package, as before). You have two choices (do not do both): Name the time expression using the required timing (e.g., \"60 s\"); or choose a literal from the Expr drop-down, and document its unit of measurement (seconds) somewhere, e.g., as a note. Name the time event something sensible, and click OK. Pay attention to the \"Is Relative\" radiobuttons, because this determines whether the time action should be counted from the beginning of model execution (false), or the beginning of node activation (true). This has created an accept event action that waits for some timeout event. However, we cannot see this on the diagram. Even though the previous steps more or less correctly created the timing actions, they do not appear on the diagram. The alternative (and much easier) way is to create an empty TimeEvent trigger, and just use the name of the accept event action to assert the time event's value: Depending on the relative-ness of the timeout event, you can use \"after: or \"at\": All this together should look like this on the diagram: What's still missing, is the activation of the interruptible activity region, for which we can use a fork from the initial node: and also a way for the timeout event to interrupt the interruptible activity region: Notice that a merge node was more suitable for the task (rather than a join), because we want to exit the activity if one of the two inputs become active.","title":"Time event creation"},{"location":"rete-bdd-ibd-modeling-guidebook-en/","text":"Block Definition Diagram Diagram Creation Right click on the selected Package ( Requirements in this example) -> New Diagram -> SysML 1.6 Block Definition Diagram . In the pop-up window give a name to the diagram. Hint : During BDD modeling the most used groups from the Palette are the Blocks and the Ports and Flows , so pin these. System Context To add an Actor during System Context modeling: 1. Select Actor from the toolbox: Palette -> Blocks -> Actor . 1. Place it on the diagram. 1. Edit the name in the Properties window. Block Creation and Settings: Select Block from the toolbox: Palette -> Blocks -> Block . Place it in the diagram, Hint : by holding the mousebutton and drawing a square the size of the block can be altered. Add a name to the Block . (You can always change it in the Properties window.) The Attributes , Operations , Constraints compartpents are displayed by default, these can be unnecessary, you can access the menu to hide them: Ctrl+F5 Right click on the block -> Filters -> Show/Hide Compartments You can edit these properties on multiple block simultaneously by selecting multiple blocks. You can add Part/Reference/etc. properties to a Block on the UML tab of the Properties window, in the Owned Attributes field. This is most useful for properties with primitive types, as you can add Ports or Properties typed by Blocks more easily from the Palette with connections. Relations between Blocks You can select from the possible Associations by unfolding the Palette -> Blocks -> Association We mostly use Association (Directed) and Composite Association from these. The Association should be handled with care, define Ports instead of referencing another Block with specific type. The PartAssociation can be misleading, it does not create the proper Part Property in the block, use the Composite Association instead. The SharedAssociation does not have proper semantics in SysML, avoid using it. The properties of the Association can be edited in the Properties window, like the names of the ends of the association or the multiplicities. Be mindful which end of the association you're editing! In systems engineering the source end of the association usually does not have a name, however in Papyrus a default name is assigned to this end (inherited from UML), you can delete this to make your diagram more transparent. The Generalization can be found outside of the Association : Palette -> Blocks -> Generalization Containment can be defined with Composite Association , do not mix it up with Containment Link ! Port Creation and Properties Select the appropriate Port from Palette -> Ports and Flows -> Port / Full Port / Proxy Port . Clicking on a Block add the Port to it (adds it as Owned Property automatically). Properties of the Port can be edited in the UML tab of the Properties window. The Type of the Port ( Block or Interface Block ) must be created separatelly and added to the Port in the ... menu. In order to make BDDs less cluttered, the typing (interface)blocks can be omitted from the diagrams, it is enough if they exist in the model. We advise you to put them in a separate \"ports\" package (either one package for the whole model, or if there would be too many of them, one ports package for each subsystem package). The Provided and Required interfaces field can only be edited after selecting the Type of the Port This might be the easiest way to add provided/required interfaces to the typing (interface)block of the port, as an interface realization (for provided) or a usage relationship has to be created for the typing block. There is no list for doing this in the typing block itself, but adding the interfaces to the port's lists automatically creates the necessary relationships in the model. Flow properties cannot be created directly in the diagram editor (it exists in the toolbox, but we could not drop it on any model elements from there). However, they can be added to the port's typing (interface)block in the model explorer: right click on the typing block -> SysML 1.6 Child -> FlowProperty . The type of the flow property (the thing that flows) can be specified in the UML tab of the properties window. It is mostly either a signal, a value type, or a block. The direction can be set in the SysML 1.6 tab. The type has to be created beforehand. The Is Conjugated switch reverses the Provided and Required interfaces and the directions of the Flow Properties . On BDDs, port labels do not show anything but the name of the port even when other properties should also be shown according to the appearance settings. This is a known bug (or rather lack of feature) of Papyrus. The properties are correctly shown on IBDs though. In the homework, you do not have to worry about this, it is enough if the port name is shown and all properties are correctly set in the properties window. Internal Block Diagram IBD Creation From the Model Explorer select the Block you want to define its connections: Right click -> New Diagram -> SysML 1.6 Internal Block Diagram Drag-and-drop the model elements contained by the Block to the diagram. To represent the hierarchy of the structure switch on the Internal Structure : Ctrl+F5 Right click on the block -> Filters -> Show/Hide Compartments Hint : a model element referenced by Composite Association has solid border, a model element referenced by Association or Shared Association has dashed border System Context Adding Information Flow Palette -> Ports and Flows -> Item flow The information can be set on the UML tab of the Properties window, however during this homework seting the name properly is sufficient. Connector Creation Palette -> Blocks -> Connector A Connector can be typed by an Association defined on the BDD, which can be set on the UML tab of the Properties window New Association can be added using the + menu. Existing Association can be selected in the ... menu. Binding Connector used to express the equality of the model elements, do not mix these up! Remarks New contained of referenced Blocks can be added from the Palette during the IBD modeling, which adds new Part/Reference Property to the BDD of the IBD . In the modeling approach presented in this course the BDD should be modeled first, so this option should not be used.","title":"BDD and IBD modeling Papyrus guidebook"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#block-definition-diagram","text":"","title":"Block Definition Diagram"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#diagram-creation","text":"Right click on the selected Package ( Requirements in this example) -> New Diagram -> SysML 1.6 Block Definition Diagram . In the pop-up window give a name to the diagram. Hint : During BDD modeling the most used groups from the Palette are the Blocks and the Ports and Flows , so pin these.","title":"Diagram Creation"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#system-context","text":"To add an Actor during System Context modeling: 1. Select Actor from the toolbox: Palette -> Blocks -> Actor . 1. Place it on the diagram. 1. Edit the name in the Properties window.","title":"System Context"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#block-creation-and-settings","text":"Select Block from the toolbox: Palette -> Blocks -> Block . Place it in the diagram, Hint : by holding the mousebutton and drawing a square the size of the block can be altered. Add a name to the Block . (You can always change it in the Properties window.) The Attributes , Operations , Constraints compartpents are displayed by default, these can be unnecessary, you can access the menu to hide them: Ctrl+F5 Right click on the block -> Filters -> Show/Hide Compartments You can edit these properties on multiple block simultaneously by selecting multiple blocks. You can add Part/Reference/etc. properties to a Block on the UML tab of the Properties window, in the Owned Attributes field. This is most useful for properties with primitive types, as you can add Ports or Properties typed by Blocks more easily from the Palette with connections.","title":"Block Creation and Settings:"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#relations-between-blocks","text":"You can select from the possible Associations by unfolding the Palette -> Blocks -> Association We mostly use Association (Directed) and Composite Association from these. The Association should be handled with care, define Ports instead of referencing another Block with specific type. The PartAssociation can be misleading, it does not create the proper Part Property in the block, use the Composite Association instead. The SharedAssociation does not have proper semantics in SysML, avoid using it. The properties of the Association can be edited in the Properties window, like the names of the ends of the association or the multiplicities. Be mindful which end of the association you're editing! In systems engineering the source end of the association usually does not have a name, however in Papyrus a default name is assigned to this end (inherited from UML), you can delete this to make your diagram more transparent. The Generalization can be found outside of the Association : Palette -> Blocks -> Generalization Containment can be defined with Composite Association , do not mix it up with Containment Link !","title":"Relations between Blocks"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#port-creation-and-properties","text":"Select the appropriate Port from Palette -> Ports and Flows -> Port / Full Port / Proxy Port . Clicking on a Block add the Port to it (adds it as Owned Property automatically). Properties of the Port can be edited in the UML tab of the Properties window. The Type of the Port ( Block or Interface Block ) must be created separatelly and added to the Port in the ... menu. In order to make BDDs less cluttered, the typing (interface)blocks can be omitted from the diagrams, it is enough if they exist in the model. We advise you to put them in a separate \"ports\" package (either one package for the whole model, or if there would be too many of them, one ports package for each subsystem package). The Provided and Required interfaces field can only be edited after selecting the Type of the Port This might be the easiest way to add provided/required interfaces to the typing (interface)block of the port, as an interface realization (for provided) or a usage relationship has to be created for the typing block. There is no list for doing this in the typing block itself, but adding the interfaces to the port's lists automatically creates the necessary relationships in the model. Flow properties cannot be created directly in the diagram editor (it exists in the toolbox, but we could not drop it on any model elements from there). However, they can be added to the port's typing (interface)block in the model explorer: right click on the typing block -> SysML 1.6 Child -> FlowProperty . The type of the flow property (the thing that flows) can be specified in the UML tab of the properties window. It is mostly either a signal, a value type, or a block. The direction can be set in the SysML 1.6 tab. The type has to be created beforehand. The Is Conjugated switch reverses the Provided and Required interfaces and the directions of the Flow Properties . On BDDs, port labels do not show anything but the name of the port even when other properties should also be shown according to the appearance settings. This is a known bug (or rather lack of feature) of Papyrus. The properties are correctly shown on IBDs though. In the homework, you do not have to worry about this, it is enough if the port name is shown and all properties are correctly set in the properties window.","title":"Port Creation and Properties"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#internal-block-diagram","text":"","title":"Internal Block Diagram"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#ibd-creation","text":"From the Model Explorer select the Block you want to define its connections: Right click -> New Diagram -> SysML 1.6 Internal Block Diagram Drag-and-drop the model elements contained by the Block to the diagram. To represent the hierarchy of the structure switch on the Internal Structure : Ctrl+F5 Right click on the block -> Filters -> Show/Hide Compartments Hint : a model element referenced by Composite Association has solid border, a model element referenced by Association or Shared Association has dashed border","title":"IBD Creation"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#system-context_1","text":"Adding Information Flow Palette -> Ports and Flows -> Item flow The information can be set on the UML tab of the Properties window, however during this homework seting the name properly is sufficient.","title":"System Context"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#connector-creation","text":"Palette -> Blocks -> Connector A Connector can be typed by an Association defined on the BDD, which can be set on the UML tab of the Properties window New Association can be added using the + menu. Existing Association can be selected in the ... menu. Binding Connector used to express the equality of the model elements, do not mix these up!","title":"Connector Creation"},{"location":"rete-bdd-ibd-modeling-guidebook-en/#remarks","text":"New contained of referenced Blocks can be added from the Palette during the IBD modeling, which adds new Part/Reference Property to the BDD of the IBD . In the modeling approach presented in this course the BDD should be modeled first, so this option should not be used.","title":"Remarks"},{"location":"rete-bdd-ibd-modeling-guidebook/","text":"BDD \u00daj BDD l\u00e9trehoz\u00e1sa: jobb katt a c\u00e9lpackage-en New Diagram SysML 1.6 Block Definition Diagram A felugr\u00f3 ablakban megadhat\u00f3 a diagram neve Tipp : A BDD editor toolbox k\u00e9t legink\u00e1bb haszn\u00e1lt csoportja a Blocks \u00e9s a Ports and Flows, ezeket \u00e9rdemes kinyitni \u00e9s pinelni Actor l\u00e9trehoz\u00e1sa (System Contexthez): 1. Toolbox -> Blocks csoport -> Actor 1. A diagramter\u00fcleten kattintva l\u00e9trej\u00f6n 1. A neve a Properties ablakban \u00e1ll\u00edthat\u00f3 Blokk L\u00e9trehoz\u00e1sa \u00e9s be\u00e1ll\u00edt\u00e1sai: 1. Toolbox -> Blocks csoport -> Block 1. Kattint\u00e1ssal default m\u00e9ret\u0171, az eg\u00e9rgombot lenyomva tartva t\u00e9glalap rajzol\u00e1s\u00e1val tetsz\u0151leges m\u00e9ret\u0171 blokk hozhat\u00f3 l\u00e9tre 1. Ez ut\u00e1n megadhat\u00f3 a blokk neve; m\u00f3dos\u00edtani k\u00e9s\u0151bb a nevet csak a properties panelen lehet 1. A blokk compartmentjei k\u00f6z\u00fcl automatikusan megjelenik az Attributes, az Operations \u00e9s a constraints; ezek gyakran feleslegesek, megjelen\u00edt\u00e9s\u00fck \u00e1ll\u00edthat\u00f3: - Ctrl-F5 vagy - blokkon jobb katt -> Filters -> Show/Hide Compartments - t\u00f6bb blokkot egyszerre kijel\u00f6lve egyszerre is \u00e1ll\u00edthat\u00f3ak, nem kell egyes\u00e9vel 1. A blokkhoz \u00faj (SysML \u00e9rtelm\u0171, az az part/reference/etc.) property a Properties ablak UML f\u00fcl\u00e9n az Owned Attributes r\u00e9szen adhat\u00f3 hozz\u00e1 a jobb oldali + jelre kattintva, \u00e9s a - jellel t\u00e1vol\u00edthat\u00f3 el - ennek legink\u00e1bb a primit\u00edv t\u00edpus\u00fa property-kn\u00e9l van haszna, mivel mind port, mind blokkal t\u00edpusozott property k\u00f6nnyebben adhat\u00f3 hozz\u00e1 a toolbox \u00e9s kapcsolatok seg\u00edts\u00e9g\u00e9vel Blokkok k\u00f6z\u00f6tti kapcsolatok felv\u00e9tele: Toolbox -> Blocks csoport -> Association lenyithat\u00f3, egybe vannak csoportos\u00edtva a k\u00fcl\u00f6nb\u00f6z\u0151 lehets\u00e9ges asszoci\u00e1ci\u00f3k (mindig a legut\u00f3bb haszn\u00e1lt ker\u00fcl a kiemelt helyre) Csak az Association (Directed)-et \u00e9s a Composite Association (Directed)-et haszn\u00e1ljuk ezek k\u00f6z\u00fcl A sima Associationnel vigy\u00e1zva kell b\u00e1nni: nagyon ritk\u00e1n akarjuk meghat\u00e1rozni a pontos t\u00edpus\u00e1t egy hivatkozott (nem tartalmazott) m\u00e1sik elemnek ahelyett, hogy porton kereszt\u00fcl kommunik\u00e1ln\u00e1nk, csak az interf\u00e9szt specifik\u00e1lva A PartAssociation megt\u00e9veszt\u0151, part property-t Composite Associationnel \u00e9rdemes felvenni, mert a Part Associationnel nem j\u00f6n l\u00e9tre az alap be\u00e1ll\u00edt\u00e1sokkal a megfelel\u0151 property a blokkban A diagramon a kapcsolatot kijel\u00f6lve a Properties ablakban \u00e1ll\u00edthat\u00f3ak annak tulajdons\u00e1gai, amib\u0151l legfontosabbak az egyes oldalak neve \u00e9s multiplicit\u00e1sa. Vigy\u00e1zni kell, hogy megfelel\u0151 oldal tulajdons\u00e1gait \u00e1ll\u00edtsuk! A kapcsolat kiindul\u00f3 oldal\u00e1t rendszertervez\u00e9sben \u00e1ltal\u00e1ban nem hasznos elnevezni, a papyrus m\u00e9gis (UML-b\u0151l \u00f6r\u00f6k\u00f6lve) ezt megteszi - a n\u00e9v t\u00f6r\u00f6lhet\u0151, hogy ne zavarjon a diagramon. a blokkba ker\u00fcl\u0151 Property neve \u00e9s multiplicit\u00e1sa automatikusan \u00e1ll\u00edt\u00f3dik a kapcsolatv\u00e9g tulajdons\u00e1gainak \u00e1ll\u00edt\u00e1s\u00e1val, ez ellen\u0151rizhet\u0151 a kiindul\u00e1si oldal blokkj\u00e1nak Owned attributes list\u00e1j\u00e1ban A Generalization kapcsolat k\u00fcl\u00f6n tal\u00e1lhat\u00f3 meg a Blocks csoportban A tartalmaz\u00e1st Composite Association \u00edrja le, nem keverend\u0151 \u00f6ssze a Containment Linkkel, ami szint\u00e9n megtal\u00e1lhat\u00f3 a toolboxban! Portok l\u00e9trehoz\u00e1sa \u00e9s tulajdons\u00e1gai: 1. Toolbox -> Ports and Flows csoport -> Port/Full Port/Proxy Port kiv\u00e1laszt\u00e1sa 1. Egy megl\u00e9v\u0151 blokkra kattintva a kiv\u00e1lasztott fajt\u00e1j\u00fa port l\u00e9trej\u00f6n a blokkon (owned attributes list\u00e1hoz automatikusan hozz\u00e1adva) 1. A portot kiv\u00e1lasztva annak minden tulajdons\u00e1ga a Properties ablak UML f\u00fcl\u00e9n \u00e1ll\u00edthat\u00f3. - A Type melletti + jeln\u00e9l sajnos a SysML portok t\u00edpusoz\u00e1s\u00e1ra haszn\u00e1lhat\u00f3 Block \u00e9s Interface Block nincsenek a lehet\u0151s\u00e9gek list\u00e1j\u00e1n, \u00edgy a t\u00edpust ad\u00f3 Blockot vagy Interface Blockot k\u00fcl\u00f6n l\u00e9tre kell hozni, \u00e9s a Type melleti ...-al kikeresni - A Provided \u00e9s Required (interface) list\u00e1khoz csak a Type megad\u00e1sa ut\u00e1n adhat\u00f3 hozz\u00e1 \u00faj elem - Ezeken k\u00edv\u00fcl az Is Conjugated kapcsol\u00f3 fontos be\u00e1ll\u00edt\u00e1s m\u00e9g: egy konjug\u00e1lt port t\u00edpusa \"megfordul\", azaz minden eredetileg Provided interface-b\u0151l Required lesz \u00e9s ford\u00edtva, \u00e9s a befel\u00e9 ir\u00e1ny\u00fa Flow property-kb\u0151l kifel\u00e9 ir\u00e1ny\u00fa lesz, \u00e9s ford\u00edtva IBD l\u00e9trehoz\u00e1sa \u00e9s tartalmazott blokkok megjelen\u00edt\u00e9se: Model explorer -> Jobb katt azon a blokkon, aminek a belsej\u00e9t le fogja \u00edrni az IBD -> New Diagram -> SysML 1.6 Internal Block Diagram; a felugr\u00f3 ablakban megadhat\u00f3 a diagram neve A blokk \u00e1ltal tartalmazott elemek a diagramra h\u00fazhat\u00f3k a model explorerb\u0151l T\u00f6bbszint\u0171 strukt\u00fara \u00e1br\u00e1zol\u00e1s\u00e1hoz az IBD-n l\u00e9v\u0151 blokkokban az Internal Structure compartment megjelen\u00edt\u00e9se sz\u00fcks\u00e9ges Kijel\u00f6lve a blokkot az IBD-n Ctrl-F5 vagy Jobb katt -> Filters -> Show/Hide Compartments Ha egy Composite Association\u00f6n kereszt\u00fcl (azaz Part Propertyk\u00e9nt) tartalmazott modellelem ker\u00fcl fel a diagramra, annak kerete folytonos vonal. Ha sima vagy shared association\u00f6n kereszt\u00fcl (azaz Reference Propertyk\u00e9nt) hivatkozott elem ker\u00fcl fel, annak kerete szaggatott vonal. Ha teh\u00e1t egy elem kerete szaggatott, vigy\u00e1zni kell, hogy val\u00f3ban csak hivatkoz\u00e1st akarunk-e, vagy lemaradt a tartalmaz\u00e1s / rossz helyr\u0151l h\u00faztuk be az elemet a model explorerb\u0151l. Tipp : A papyrus az IBD egyes blokkjait cs\u00faszk\u00e1val jelen\u00edti meg, ha t\u00fal nagy a bels\u0151 strukt\u00fara le\u00edr\u00e1sa. Ezeket nem \u00e9rdemes mozgatni, mert a t\u00f6bb egym\u00e1sba \u00e1gyazott cs\u00faszka mozgat\u00e1sa el\u00e9g furcs\u00e1n tud b\u00e1nni a t\u00f6bb szinten \u00e1tny\u00fal\u00f3 connectorokkal, ink\u00e1bb a blokkok m\u00e9ret\u00e9nek n\u00f6vel\u00e9se, \u00e9s csak az IBD legk\u00fcls\u0151 cs\u00faszk\u00e1j\u00e1nak a haszn\u00e1lata javasolt. Information flow l\u00e9trehoz\u00e1sa (System contexthez): 1. Toolbox -> Ports and Flows csoport -> Item flow 1. Az \u00e1tadott inform\u00e1ci\u00f3 a Properties ablak UML f\u00fcl\u00e9n a Conveyed list\u00e1ban adhat\u00f3 meg, azonban a h\u00e1zi feladatban egyszer\u0171en a n\u00e9vben is el\u00e9g megadni az inform\u00e1ci\u00f3t Connectorok l\u00e9trehoz\u00e1sa: 1. Toolbox -> Blocks csoport -> Connector 1. SysML-ben egy connector t\u00edpusa a BDD-n megadott asszoci\u00e1ci\u00f3 lehet, ezt a Properties ablakban az UML f\u00fcl\u00f6n a Type be\u00e1ll\u00edt\u00e1s\u00e1val lehet kiv\u00e1lasztani. A + jellel \u00faj asszoci\u00e1ci\u00f3 adhat\u00f3 hozz\u00e1, a ...-al pedig a megl\u00e9v\u0151kb\u0151l lehet v\u00e1lasztani. A Connector \u00e9s a Binding Connector nem \u00f6sszekeverend\u0151! Binding Connector k\u00e9t elem azonoss\u00e1g\u00e1t jelenti, nem k\u00f6zt\u00fck l\u00e9v\u0151 kapcsolatot - az haszn\u00e1lhat\u00f3 p\u00e9ld\u00e1ul annak megad\u00e1s\u00e1ra, hogy egy Reference Property az IBD \u00e1ltal le\u00edrt elrendez\u00e9sben milyen konkr\u00e9t block use-ra hivatkozik. \u00daj tartalmazott blokk vagy referencia hozz\u00e1adhat\u00f3 a toolbox Block csoportj\u00e1b\u00f3l. A felugr\u00f3 ablakban ekkor ki kell v\u00e1lasztani, hogy az \u00faj part/reference property t\u00edpusa is \u00faj lesz-e (ekkor meg kell adnunk a nev\u00e9t), vagy pedig egy megl\u00e9v\u0151 modellelem (ekkor ki kell v\u00e1lasztani azt). Fontos, hogy ez \u00faj part/reference property-t ad hozz\u00e1 az IBD kontextus\u00e1ul szolg\u00e1l\u00f3 blokkhoz, amit kor\u00e1bban nem vett\u00fcnk fel a BDD-n. A t\u00e1rgyban bemutatott modellez\u00e9si megk\u00f6zel\u00edt\u00e9sben el\u0151sz\u00f6t a BDD k\u00e9sz\u00fcl el eg\u00e9sz\u00e9ben, \u00edgy ennek a lehet\u0151s\u00e9gnek a haszn\u00e1lat\u00e1ra nincs sz\u00fcks\u00e9g a h\u00e1zi feladatban.","title":"BDD \u00e9s IBD modellez\u00e9s Papyrus seg\u00e9dlet"},{"location":"rete-bdd-ibd-modeling-guidebook/#bdd","text":"\u00daj BDD l\u00e9trehoz\u00e1sa: jobb katt a c\u00e9lpackage-en New Diagram SysML 1.6 Block Definition Diagram A felugr\u00f3 ablakban megadhat\u00f3 a diagram neve Tipp : A BDD editor toolbox k\u00e9t legink\u00e1bb haszn\u00e1lt csoportja a Blocks \u00e9s a Ports and Flows, ezeket \u00e9rdemes kinyitni \u00e9s pinelni Actor l\u00e9trehoz\u00e1sa (System Contexthez): 1. Toolbox -> Blocks csoport -> Actor 1. A diagramter\u00fcleten kattintva l\u00e9trej\u00f6n 1. A neve a Properties ablakban \u00e1ll\u00edthat\u00f3 Blokk L\u00e9trehoz\u00e1sa \u00e9s be\u00e1ll\u00edt\u00e1sai: 1. Toolbox -> Blocks csoport -> Block 1. Kattint\u00e1ssal default m\u00e9ret\u0171, az eg\u00e9rgombot lenyomva tartva t\u00e9glalap rajzol\u00e1s\u00e1val tetsz\u0151leges m\u00e9ret\u0171 blokk hozhat\u00f3 l\u00e9tre 1. Ez ut\u00e1n megadhat\u00f3 a blokk neve; m\u00f3dos\u00edtani k\u00e9s\u0151bb a nevet csak a properties panelen lehet 1. A blokk compartmentjei k\u00f6z\u00fcl automatikusan megjelenik az Attributes, az Operations \u00e9s a constraints; ezek gyakran feleslegesek, megjelen\u00edt\u00e9s\u00fck \u00e1ll\u00edthat\u00f3: - Ctrl-F5 vagy - blokkon jobb katt -> Filters -> Show/Hide Compartments - t\u00f6bb blokkot egyszerre kijel\u00f6lve egyszerre is \u00e1ll\u00edthat\u00f3ak, nem kell egyes\u00e9vel 1. A blokkhoz \u00faj (SysML \u00e9rtelm\u0171, az az part/reference/etc.) property a Properties ablak UML f\u00fcl\u00e9n az Owned Attributes r\u00e9szen adhat\u00f3 hozz\u00e1 a jobb oldali + jelre kattintva, \u00e9s a - jellel t\u00e1vol\u00edthat\u00f3 el - ennek legink\u00e1bb a primit\u00edv t\u00edpus\u00fa property-kn\u00e9l van haszna, mivel mind port, mind blokkal t\u00edpusozott property k\u00f6nnyebben adhat\u00f3 hozz\u00e1 a toolbox \u00e9s kapcsolatok seg\u00edts\u00e9g\u00e9vel Blokkok k\u00f6z\u00f6tti kapcsolatok felv\u00e9tele: Toolbox -> Blocks csoport -> Association lenyithat\u00f3, egybe vannak csoportos\u00edtva a k\u00fcl\u00f6nb\u00f6z\u0151 lehets\u00e9ges asszoci\u00e1ci\u00f3k (mindig a legut\u00f3bb haszn\u00e1lt ker\u00fcl a kiemelt helyre) Csak az Association (Directed)-et \u00e9s a Composite Association (Directed)-et haszn\u00e1ljuk ezek k\u00f6z\u00fcl A sima Associationnel vigy\u00e1zva kell b\u00e1nni: nagyon ritk\u00e1n akarjuk meghat\u00e1rozni a pontos t\u00edpus\u00e1t egy hivatkozott (nem tartalmazott) m\u00e1sik elemnek ahelyett, hogy porton kereszt\u00fcl kommunik\u00e1ln\u00e1nk, csak az interf\u00e9szt specifik\u00e1lva A PartAssociation megt\u00e9veszt\u0151, part property-t Composite Associationnel \u00e9rdemes felvenni, mert a Part Associationnel nem j\u00f6n l\u00e9tre az alap be\u00e1ll\u00edt\u00e1sokkal a megfelel\u0151 property a blokkban A diagramon a kapcsolatot kijel\u00f6lve a Properties ablakban \u00e1ll\u00edthat\u00f3ak annak tulajdons\u00e1gai, amib\u0151l legfontosabbak az egyes oldalak neve \u00e9s multiplicit\u00e1sa. Vigy\u00e1zni kell, hogy megfelel\u0151 oldal tulajdons\u00e1gait \u00e1ll\u00edtsuk! A kapcsolat kiindul\u00f3 oldal\u00e1t rendszertervez\u00e9sben \u00e1ltal\u00e1ban nem hasznos elnevezni, a papyrus m\u00e9gis (UML-b\u0151l \u00f6r\u00f6k\u00f6lve) ezt megteszi - a n\u00e9v t\u00f6r\u00f6lhet\u0151, hogy ne zavarjon a diagramon. a blokkba ker\u00fcl\u0151 Property neve \u00e9s multiplicit\u00e1sa automatikusan \u00e1ll\u00edt\u00f3dik a kapcsolatv\u00e9g tulajdons\u00e1gainak \u00e1ll\u00edt\u00e1s\u00e1val, ez ellen\u0151rizhet\u0151 a kiindul\u00e1si oldal blokkj\u00e1nak Owned attributes list\u00e1j\u00e1ban A Generalization kapcsolat k\u00fcl\u00f6n tal\u00e1lhat\u00f3 meg a Blocks csoportban A tartalmaz\u00e1st Composite Association \u00edrja le, nem keverend\u0151 \u00f6ssze a Containment Linkkel, ami szint\u00e9n megtal\u00e1lhat\u00f3 a toolboxban! Portok l\u00e9trehoz\u00e1sa \u00e9s tulajdons\u00e1gai: 1. Toolbox -> Ports and Flows csoport -> Port/Full Port/Proxy Port kiv\u00e1laszt\u00e1sa 1. Egy megl\u00e9v\u0151 blokkra kattintva a kiv\u00e1lasztott fajt\u00e1j\u00fa port l\u00e9trej\u00f6n a blokkon (owned attributes list\u00e1hoz automatikusan hozz\u00e1adva) 1. A portot kiv\u00e1lasztva annak minden tulajdons\u00e1ga a Properties ablak UML f\u00fcl\u00e9n \u00e1ll\u00edthat\u00f3. - A Type melletti + jeln\u00e9l sajnos a SysML portok t\u00edpusoz\u00e1s\u00e1ra haszn\u00e1lhat\u00f3 Block \u00e9s Interface Block nincsenek a lehet\u0151s\u00e9gek list\u00e1j\u00e1n, \u00edgy a t\u00edpust ad\u00f3 Blockot vagy Interface Blockot k\u00fcl\u00f6n l\u00e9tre kell hozni, \u00e9s a Type melleti ...-al kikeresni - A Provided \u00e9s Required (interface) list\u00e1khoz csak a Type megad\u00e1sa ut\u00e1n adhat\u00f3 hozz\u00e1 \u00faj elem - Ezeken k\u00edv\u00fcl az Is Conjugated kapcsol\u00f3 fontos be\u00e1ll\u00edt\u00e1s m\u00e9g: egy konjug\u00e1lt port t\u00edpusa \"megfordul\", azaz minden eredetileg Provided interface-b\u0151l Required lesz \u00e9s ford\u00edtva, \u00e9s a befel\u00e9 ir\u00e1ny\u00fa Flow property-kb\u0151l kifel\u00e9 ir\u00e1ny\u00fa lesz, \u00e9s ford\u00edtva IBD l\u00e9trehoz\u00e1sa \u00e9s tartalmazott blokkok megjelen\u00edt\u00e9se: Model explorer -> Jobb katt azon a blokkon, aminek a belsej\u00e9t le fogja \u00edrni az IBD -> New Diagram -> SysML 1.6 Internal Block Diagram; a felugr\u00f3 ablakban megadhat\u00f3 a diagram neve A blokk \u00e1ltal tartalmazott elemek a diagramra h\u00fazhat\u00f3k a model explorerb\u0151l T\u00f6bbszint\u0171 strukt\u00fara \u00e1br\u00e1zol\u00e1s\u00e1hoz az IBD-n l\u00e9v\u0151 blokkokban az Internal Structure compartment megjelen\u00edt\u00e9se sz\u00fcks\u00e9ges Kijel\u00f6lve a blokkot az IBD-n Ctrl-F5 vagy Jobb katt -> Filters -> Show/Hide Compartments Ha egy Composite Association\u00f6n kereszt\u00fcl (azaz Part Propertyk\u00e9nt) tartalmazott modellelem ker\u00fcl fel a diagramra, annak kerete folytonos vonal. Ha sima vagy shared association\u00f6n kereszt\u00fcl (azaz Reference Propertyk\u00e9nt) hivatkozott elem ker\u00fcl fel, annak kerete szaggatott vonal. Ha teh\u00e1t egy elem kerete szaggatott, vigy\u00e1zni kell, hogy val\u00f3ban csak hivatkoz\u00e1st akarunk-e, vagy lemaradt a tartalmaz\u00e1s / rossz helyr\u0151l h\u00faztuk be az elemet a model explorerb\u0151l. Tipp : A papyrus az IBD egyes blokkjait cs\u00faszk\u00e1val jelen\u00edti meg, ha t\u00fal nagy a bels\u0151 strukt\u00fara le\u00edr\u00e1sa. Ezeket nem \u00e9rdemes mozgatni, mert a t\u00f6bb egym\u00e1sba \u00e1gyazott cs\u00faszka mozgat\u00e1sa el\u00e9g furcs\u00e1n tud b\u00e1nni a t\u00f6bb szinten \u00e1tny\u00fal\u00f3 connectorokkal, ink\u00e1bb a blokkok m\u00e9ret\u00e9nek n\u00f6vel\u00e9se, \u00e9s csak az IBD legk\u00fcls\u0151 cs\u00faszk\u00e1j\u00e1nak a haszn\u00e1lata javasolt. Information flow l\u00e9trehoz\u00e1sa (System contexthez): 1. Toolbox -> Ports and Flows csoport -> Item flow 1. Az \u00e1tadott inform\u00e1ci\u00f3 a Properties ablak UML f\u00fcl\u00e9n a Conveyed list\u00e1ban adhat\u00f3 meg, azonban a h\u00e1zi feladatban egyszer\u0171en a n\u00e9vben is el\u00e9g megadni az inform\u00e1ci\u00f3t Connectorok l\u00e9trehoz\u00e1sa: 1. Toolbox -> Blocks csoport -> Connector 1. SysML-ben egy connector t\u00edpusa a BDD-n megadott asszoci\u00e1ci\u00f3 lehet, ezt a Properties ablakban az UML f\u00fcl\u00f6n a Type be\u00e1ll\u00edt\u00e1s\u00e1val lehet kiv\u00e1lasztani. A + jellel \u00faj asszoci\u00e1ci\u00f3 adhat\u00f3 hozz\u00e1, a ...-al pedig a megl\u00e9v\u0151kb\u0151l lehet v\u00e1lasztani. A Connector \u00e9s a Binding Connector nem \u00f6sszekeverend\u0151! Binding Connector k\u00e9t elem azonoss\u00e1g\u00e1t jelenti, nem k\u00f6zt\u00fck l\u00e9v\u0151 kapcsolatot - az haszn\u00e1lhat\u00f3 p\u00e9ld\u00e1ul annak megad\u00e1s\u00e1ra, hogy egy Reference Property az IBD \u00e1ltal le\u00edrt elrendez\u00e9sben milyen konkr\u00e9t block use-ra hivatkozik. \u00daj tartalmazott blokk vagy referencia hozz\u00e1adhat\u00f3 a toolbox Block csoportj\u00e1b\u00f3l. A felugr\u00f3 ablakban ekkor ki kell v\u00e1lasztani, hogy az \u00faj part/reference property t\u00edpusa is \u00faj lesz-e (ekkor meg kell adnunk a nev\u00e9t), vagy pedig egy megl\u00e9v\u0151 modellelem (ekkor ki kell v\u00e1lasztani azt). Fontos, hogy ez \u00faj part/reference property-t ad hozz\u00e1 az IBD kontextus\u00e1ul szolg\u00e1l\u00f3 blokkhoz, amit kor\u00e1bban nem vett\u00fcnk fel a BDD-n. A t\u00e1rgyban bemutatott modellez\u00e9si megk\u00f6zel\u00edt\u00e9sben el\u0151sz\u00f6t a BDD k\u00e9sz\u00fcl el eg\u00e9sz\u00e9ben, \u00edgy ennek a lehet\u0151s\u00e9gnek a haszn\u00e1lat\u00e1ra nincs sz\u00fcks\u00e9g a h\u00e1zi feladatban.","title":"BDD"},{"location":"rete-install-basics-en/","text":"Preliminaries For the successful installation and licensing of Enterprise Architect, SmartGit and LemonTree Desktop, the following files will be necessary: easetupfull_x86.exe : Enterprise Architect installation file smartgit-24_1-preview-13-setup.exe : SmartGit installation file LemonTree.msi : LemonTree Desktop installation file Furthermore, the activation codes and license server credentials are also needed for licensing the tools. Enterprise Architect Launching the installer, the wizard takes the user through the installation steps. Administrator permissions are necessary. All default values are suitable as-is. After installation, launch Enterprise Architect. The following windows should greet the user: Click Add Key , then select Get Shared Key . Complete the form using your name and company (e.g., BME ): Click on the three dots next to Shared Keystore , and fill in the form using the license server details (the screenshot has non-working info): Click Test , which should succeed, then click OK . Under Select a Product , choose the correct edition, then click OK . The License Management window should now be populated: Click Close . A new window should appear, prompting for an activation code. Fill in the code, accept the agreement (after reading it through), then click OK . The main window of EA should now open. SmartGit Launch the installer (Administrator permission are necessary). The default values are suitable as-is. Launch SmartGit, and choose \"Standard (workflow oriented)\" style. The next window asks for username and email, use the same as you normally use for Git and GitHub . Next, agree to the license agreement. Check Register existing license , and click on the \"Have an on-premise license server?\" text in the bottom right corner: Next, provide the address and port (together with the http:// part) for the license server: In the pop-up window, click OK. Finish the setup by clicking through the rest of the windows. Next, SmartGit should open: Next, click Edit / Preferences : Choose Add / GitHub , and decide which option is best for you (for personal computers, the latter is easier and safe enough): In the following screen, click Generate token : This should open a browser. Log in to GitHub on the opened webpage. After a successful login, the following page should appear in the browser: In the meantime, SmartGit should have populated the token textbox. Without modifying it, click Add . On the main page, click Clone , and search for the desired repository to clone: After some dialog windows (where default options are OK), this should start the cloning process: Close SmartGit for now. LemonTree Desktop Launch the LemonTree installer, and click through the installer. Make sure that SmartGit Integration is selected on the Custom Setup page: All other options are suitable as-is. After finishing the installation, launch LemonTree. In the pop-up windows (or through the top-left menu, Help, License), choose Apply New License , and Floating license from URL : Write in the license server information, then click Apply . Close LemonTree for now. Testing the Software Open SmartGit, and clone the tutorial homework assignment repository (if you haven't already). Click on Local files on the top left, and right-click the root folder, and open it in Explorer: Check if the files were successfully cloned: Open model.qeax using Enterprise Architect. Task 1 Modify the diagram by renaming Class 2 to something more informative. Save and commit to a new (feature) branch. Push the branch to remote. Open Class Diagram : Select Class2 on the diagram, then on the right, in the Properties window, rename the element: Save the model. Open back SmartGit, and hit F7 to add a new branch. Name it however you like, e.g., feature : Hit Add Branch and Checkout . In the main window, model.qeax should be shown (because it has changed): Double click the file, and LemonTree should appear: This window summarizes the changes of the uncommited file. There are four different areas: The top-left rectangle shows the model hierarchy of the changed elements (here, only Class2 is changed). The bottom-left rectangle shows the impacted diagrams (here, Class Diagram only) The top-right (or top-center) rectangle shows the comparison between the original model and the new model hierarchy from the root element The bottom-right (or bottom-center) rectangle shows the visualized changes (select the diagram on the bottom-left first!) Inspect the changes, and close LemonTree. In SmartGit (still in the \"Local files\" view), click on Stage when the changed file is selected, then on the right, provide a descriptive (!) commit message, and click Commit . Then click on Push . (Or select Commit and Push ): Task 2 Open a pull request from the new branch towards main. Open the repo on GitHub, and select the newly pushed feature branch: Click on Contribute , then click on Open Pull Request . Fill in the title and the description: Click on Create pull request . This starts a pipeline of checks, some of which need to pass before merging is allowed: Wait until the checks pass (only those with Required labels are necessary, the rest are optional). These checks will also create some comments on the pull request: If required checks pass, you can merge the PR. For the sake of a later exercise, do not yet merge this PR . Task 3 Checkout the main branch again, re-open the model, and rename Class 2 to another name, different to that of step 1. Save and commit to a new (feature) branch. Push the branch to remote. Repeat Task 1 with a different branch and modification. Note that after changing branches, you need to restart EA for it to realize the changes have taken place. Task 4 Open a pull request from the new branch towards main. If the checks pass, merge the PR. Repeat Task 2 with the new branch, then after checks pass, merge the modifications: Task 5 Look at the first PR again. See if there is a merge issue (there should be). In SmartGit, checkout the branch corresponding to the first PR. Try and merge (or rebase) main into this branch. Recognize there is a merge issue (there should be). Using LemonTree (from within SmartGit), solve the merge issue by choosing one of the modifications (doesn't matter which). Commit and push the results. Merge the PR. On the first PR, the following message forbids merging now: Open SmartGit, checkout main (double-click on the bottom left), then click Pull to pull the changes. Checkout the first feature branch, then select main and click merge on the right-click (context) menu. A prompt should appear asking how the merge should be performed: Choose Create Merge Commit . As there is a conflict, the merge commit cannot be created automatically, so choosing Create Merge-Commit and Merge to Working tree will both result in entering the merging state: Double-click the conflicting model.qeax to open in LemonTree. After LemonTree opens, instead of 2, now there are 3 columns in the right partition: \"ours\", \"theirs\", and \"target\". We can see the current (first) feature branch's modifications in the \"ours\" column, the second feature branch's modifications in the \"theirs\" column, and the desired outcome in the \"target\" column. Open down the hierarchy on the top right: To accept \"their\" modification, click on the \"Take\" button. Then click on the \"Merge and exit lemon tree\" button above. In SmartGit, click on Mark resolved : Then, click commit to finalize the merge. Click Commit & Push . After checks pass, merge the first PR.","title":"Installation Guidebook"},{"location":"rete-install-basics-en/#preliminaries","text":"For the successful installation and licensing of Enterprise Architect, SmartGit and LemonTree Desktop, the following files will be necessary: easetupfull_x86.exe : Enterprise Architect installation file smartgit-24_1-preview-13-setup.exe : SmartGit installation file LemonTree.msi : LemonTree Desktop installation file Furthermore, the activation codes and license server credentials are also needed for licensing the tools.","title":"Preliminaries"},{"location":"rete-install-basics-en/#enterprise-architect","text":"Launching the installer, the wizard takes the user through the installation steps. Administrator permissions are necessary. All default values are suitable as-is. After installation, launch Enterprise Architect. The following windows should greet the user: Click Add Key , then select Get Shared Key . Complete the form using your name and company (e.g., BME ): Click on the three dots next to Shared Keystore , and fill in the form using the license server details (the screenshot has non-working info): Click Test , which should succeed, then click OK . Under Select a Product , choose the correct edition, then click OK . The License Management window should now be populated: Click Close . A new window should appear, prompting for an activation code. Fill in the code, accept the agreement (after reading it through), then click OK . The main window of EA should now open.","title":"Enterprise Architect"},{"location":"rete-install-basics-en/#smartgit","text":"Launch the installer (Administrator permission are necessary). The default values are suitable as-is. Launch SmartGit, and choose \"Standard (workflow oriented)\" style. The next window asks for username and email, use the same as you normally use for Git and GitHub . Next, agree to the license agreement. Check Register existing license , and click on the \"Have an on-premise license server?\" text in the bottom right corner: Next, provide the address and port (together with the http:// part) for the license server: In the pop-up window, click OK. Finish the setup by clicking through the rest of the windows. Next, SmartGit should open: Next, click Edit / Preferences : Choose Add / GitHub , and decide which option is best for you (for personal computers, the latter is easier and safe enough): In the following screen, click Generate token : This should open a browser. Log in to GitHub on the opened webpage. After a successful login, the following page should appear in the browser: In the meantime, SmartGit should have populated the token textbox. Without modifying it, click Add . On the main page, click Clone , and search for the desired repository to clone: After some dialog windows (where default options are OK), this should start the cloning process: Close SmartGit for now.","title":"SmartGit"},{"location":"rete-install-basics-en/#lemontree-desktop","text":"Launch the LemonTree installer, and click through the installer. Make sure that SmartGit Integration is selected on the Custom Setup page: All other options are suitable as-is. After finishing the installation, launch LemonTree. In the pop-up windows (or through the top-left menu, Help, License), choose Apply New License , and Floating license from URL : Write in the license server information, then click Apply . Close LemonTree for now.","title":"LemonTree Desktop"},{"location":"rete-install-basics-en/#testing-the-software","text":"Open SmartGit, and clone the tutorial homework assignment repository (if you haven't already). Click on Local files on the top left, and right-click the root folder, and open it in Explorer: Check if the files were successfully cloned: Open model.qeax using Enterprise Architect.","title":"Testing the Software"},{"location":"rete-install-basics-en/#task-1","text":"Modify the diagram by renaming Class 2 to something more informative. Save and commit to a new (feature) branch. Push the branch to remote. Open Class Diagram : Select Class2 on the diagram, then on the right, in the Properties window, rename the element: Save the model. Open back SmartGit, and hit F7 to add a new branch. Name it however you like, e.g., feature : Hit Add Branch and Checkout . In the main window, model.qeax should be shown (because it has changed): Double click the file, and LemonTree should appear: This window summarizes the changes of the uncommited file. There are four different areas: The top-left rectangle shows the model hierarchy of the changed elements (here, only Class2 is changed). The bottom-left rectangle shows the impacted diagrams (here, Class Diagram only) The top-right (or top-center) rectangle shows the comparison between the original model and the new model hierarchy from the root element The bottom-right (or bottom-center) rectangle shows the visualized changes (select the diagram on the bottom-left first!) Inspect the changes, and close LemonTree. In SmartGit (still in the \"Local files\" view), click on Stage when the changed file is selected, then on the right, provide a descriptive (!) commit message, and click Commit . Then click on Push . (Or select Commit and Push ):","title":"Task 1"},{"location":"rete-install-basics-en/#task-2","text":"Open a pull request from the new branch towards main. Open the repo on GitHub, and select the newly pushed feature branch: Click on Contribute , then click on Open Pull Request . Fill in the title and the description: Click on Create pull request . This starts a pipeline of checks, some of which need to pass before merging is allowed: Wait until the checks pass (only those with Required labels are necessary, the rest are optional). These checks will also create some comments on the pull request: If required checks pass, you can merge the PR. For the sake of a later exercise, do not yet merge this PR .","title":"Task 2"},{"location":"rete-install-basics-en/#task-3","text":"Checkout the main branch again, re-open the model, and rename Class 2 to another name, different to that of step 1. Save and commit to a new (feature) branch. Push the branch to remote. Repeat Task 1 with a different branch and modification. Note that after changing branches, you need to restart EA for it to realize the changes have taken place.","title":"Task 3"},{"location":"rete-install-basics-en/#task-4","text":"Open a pull request from the new branch towards main. If the checks pass, merge the PR. Repeat Task 2 with the new branch, then after checks pass, merge the modifications:","title":"Task 4"},{"location":"rete-install-basics-en/#task-5","text":"Look at the first PR again. See if there is a merge issue (there should be). In SmartGit, checkout the branch corresponding to the first PR. Try and merge (or rebase) main into this branch. Recognize there is a merge issue (there should be). Using LemonTree (from within SmartGit), solve the merge issue by choosing one of the modifications (doesn't matter which). Commit and push the results. Merge the PR. On the first PR, the following message forbids merging now: Open SmartGit, checkout main (double-click on the bottom left), then click Pull to pull the changes. Checkout the first feature branch, then select main and click merge on the right-click (context) menu. A prompt should appear asking how the merge should be performed: Choose Create Merge Commit . As there is a conflict, the merge commit cannot be created automatically, so choosing Create Merge-Commit and Merge to Working tree will both result in entering the merging state: Double-click the conflicting model.qeax to open in LemonTree. After LemonTree opens, instead of 2, now there are 3 columns in the right partition: \"ours\", \"theirs\", and \"target\". We can see the current (first) feature branch's modifications in the \"ours\" column, the second feature branch's modifications in the \"theirs\" column, and the desired outcome in the \"target\" column. Open down the hierarchy on the top right: To accept \"their\" modification, click on the \"Take\" button. Then click on the \"Merge and exit lemon tree\" button above. In SmartGit, click on Mark resolved : Then, click commit to finalize the merge. Click Commit & Push . After checks pass, merge the first PR.","title":"Task 5"},{"location":"rete-install-basics/","text":"Papyrus telep\u00edt\u00e9se Papyrus telep\u00edt\u0151 let\u00f6lt\u00e9se: Linux: https://www.eclipse.org/downloads/download.php?file=/modeling/mdt/papyrus/rcp/2022-03/6.1.0/papyrus-2022-03-6.1.0-linux64.tar.gz&mirror_id=1190 Windows: https://www.eclipse.org/downloads/download.php?file=/modeling/mdt/papyrus/rcp/2022-03/6.1.0/papyrus-2022-03-6.1.0-win64.zip T\u00f6m\u00f6r\u00edts\u00fck ki a let\u00f6lt\u00f6tt zip-et. A papyrus-\\<version>/Papyrus mapp\u00e1b\u00f3l ind\u00edtsuk el a Papyrus-t Nyissuk meg az Eclipse Marketplace-t: Help -> Eclipse Marketplace , majd keress\u00fcnk r\u00e1 a sysml kieg\u00e9sz\u00edt\u0151kre \u00e9s telep\u00edts\u00fck fel a Papyrus SysML 1.6 kieg\u00e9sz\u00edt\u0151t. Figyelj\u00fcnk a verzi\u00f3ra! Felhaszn\u00e1l\u00f3i fel\u00fclet Model Explorer A felhaszn\u00e1l\u00f3i fel\u00fclet egyik leggyakrabban haszn\u00e1lt r\u00e9sze a Model Explorer , ami fa szerkezetben mutatja modell\u00fcnk elemeit. A tartalmaz\u00e1si hierarchia miatt nagy elemsz\u00e1m\u00fa modelleken k\u00f6nnyen \u00e1tl\u00e1thatlann\u00e1 v\u00e1lhat, ez\u00e9rt az alj\u00e1n tal\u00e1lhat\u00f3 keres\u0151 sokat seg\u00edthet az eligazod\u00e1sban. \u00daj project, package, diagram l\u00e9trehoz\u00e1sa A File -> New -> Papyrus Project men\u00fcb\u0151l v\u00e1lasszuk ki a SysML 1.6 projektet A Model Explorer -ben Jobb katt a modellen -> New Child -> Package Jobb katt az elk\u00e9sz\u00fclt Package -en -> New Diagram -> v\u00e1lasszuk ki a list\u00e1b\u00f3l a feladatnak megfelel\u0151 diagramot Diagram tulajdons\u00e1gai \u00e9s a Palette Modellelemek t\u00f6rl\u00e9se Modellelemek t\u00f6rl\u00e9s\u00e9re lehet\u0151s\u00e9g\u00fcnk van: - a Model Explorer -ben, ahol a teljes modellb\u0151l t\u00f6rl\u0151dik a kiv\u00e1laszott elem - a megnyitott diagramon a modellelemet t\u00f6r\u00f6lhetj\u00fck csak az adott diagramr\u00f3l vagy a teljes modellb\u0151l, ez\u00e9rt figyelj\u00fcnk melyiket v\u00e1lasztjuk! A Delete billenyt\u0171 lenyom\u00e1sa alap\u00e9rtelmezetten a teljes modellb\u0151l t\u00f6r\u00f6l! EMF Compare","title":"Telep\u00edt\u00e9s \u00e9s Papyrus alapok seg\u00e9dlet"},{"location":"rete-install-basics/#papyrus-telepitese","text":"Papyrus telep\u00edt\u0151 let\u00f6lt\u00e9se: Linux: https://www.eclipse.org/downloads/download.php?file=/modeling/mdt/papyrus/rcp/2022-03/6.1.0/papyrus-2022-03-6.1.0-linux64.tar.gz&mirror_id=1190 Windows: https://www.eclipse.org/downloads/download.php?file=/modeling/mdt/papyrus/rcp/2022-03/6.1.0/papyrus-2022-03-6.1.0-win64.zip T\u00f6m\u00f6r\u00edts\u00fck ki a let\u00f6lt\u00f6tt zip-et. A papyrus-\\<version>/Papyrus mapp\u00e1b\u00f3l ind\u00edtsuk el a Papyrus-t Nyissuk meg az Eclipse Marketplace-t: Help -> Eclipse Marketplace , majd keress\u00fcnk r\u00e1 a sysml kieg\u00e9sz\u00edt\u0151kre \u00e9s telep\u00edts\u00fck fel a Papyrus SysML 1.6 kieg\u00e9sz\u00edt\u0151t. Figyelj\u00fcnk a verzi\u00f3ra!","title":"Papyrus telep\u00edt\u00e9se"},{"location":"rete-install-basics/#felhasznaloi-felulet","text":"","title":"Felhaszn\u00e1l\u00f3i fel\u00fclet"},{"location":"rete-install-basics/#model-explorer","text":"A felhaszn\u00e1l\u00f3i fel\u00fclet egyik leggyakrabban haszn\u00e1lt r\u00e9sze a Model Explorer , ami fa szerkezetben mutatja modell\u00fcnk elemeit. A tartalmaz\u00e1si hierarchia miatt nagy elemsz\u00e1m\u00fa modelleken k\u00f6nnyen \u00e1tl\u00e1thatlann\u00e1 v\u00e1lhat, ez\u00e9rt az alj\u00e1n tal\u00e1lhat\u00f3 keres\u0151 sokat seg\u00edthet az eligazod\u00e1sban.","title":"Model Explorer"},{"location":"rete-install-basics/#uj-project-package-diagram-letrehozasa","text":"A File -> New -> Papyrus Project men\u00fcb\u0151l v\u00e1lasszuk ki a SysML 1.6 projektet A Model Explorer -ben Jobb katt a modellen -> New Child -> Package Jobb katt az elk\u00e9sz\u00fclt Package -en -> New Diagram -> v\u00e1lasszuk ki a list\u00e1b\u00f3l a feladatnak megfelel\u0151 diagramot","title":"\u00daj project, package, diagram l\u00e9trehoz\u00e1sa"},{"location":"rete-install-basics/#diagram-tulajdonsagai-es-a-palette","text":"","title":"Diagram tulajdons\u00e1gai \u00e9s a Palette"},{"location":"rete-install-basics/#modellelemek-torlese","text":"Modellelemek t\u00f6rl\u00e9s\u00e9re lehet\u0151s\u00e9g\u00fcnk van: - a Model Explorer -ben, ahol a teljes modellb\u0151l t\u00f6rl\u0151dik a kiv\u00e1laszott elem - a megnyitott diagramon a modellelemet t\u00f6r\u00f6lhetj\u00fck csak az adott diagramr\u00f3l vagy a teljes modellb\u0151l, ez\u00e9rt figyelj\u00fcnk melyiket v\u00e1lasztjuk! A Delete billenyt\u0171 lenyom\u00e1sa alap\u00e9rtelmezetten a teljes modellb\u0151l t\u00f6r\u00f6l!","title":"Modellelemek t\u00f6rl\u00e9se"},{"location":"rete-install-basics/#emf-compare","text":"","title":"EMF Compare"},{"location":"rete-req-and-uc-modeling-guidebook-en/","text":"Requirement modeling Diagram Creation Right click on the selected Package ( Requirements in this example) -> New Diagram -> SysML 1.6 Requirement Diagram . To add a Requirement select Requirement from the Palette and place it on the diagram, then on the Properties window, in the SysML 1.6 tab fill out the Id and the Text fields. Requirement Decomposition For Requirement Decomposition select Containment Link from the Palette and connect two Requirements . Pay attention to the direction of the connection! Deriving Requirements To Derive Requirements select DeriveReqt from the Palette and connect two Requirements . Pay attention to the direction of the connection! Use Case modeling Diagram Creation Right click on the selected Package ( UseCases in this example) -> New Diagram -> SysML 1.6 Use Case Diagram . Drag-and-drop a block representing the boundry of the system ( System Boundary ) from the Model Explorer to the diagram. Adding Actors and Use Cases To add an Actor select Actor from the Palette and place it on the diagram. To add a Use Case select Use Case from the Palette and place it on the diagram. To add an Association between the Actor and the Use Case select Communication Path from the Palette and connect the Actor and the Use Case . Relations between Actors To Generalize Actors select Generalization from the Palette and connect two Actors . Pay attention to the direction of the connection! Relations between Use Cases To Generalize Use Cases select Generalization from the Palette and connect two Use Cases . Pay attention to the direction of the connection! To Refine a Use Case select Include from the Palette and connect two Use Cases . Pay attention to the direction of the connection! To Extend a Use Case select Extend from the Palette and connect two Use Cases . Pay attention to the direction of the connection! Traceability Diagram Creation Right click on the selected Package ( UseCases in this example) -> New Diagram -> SysML 1.6 Block Definition Diagram . Drag-and-drop the Requirement ( Transport Cargo ) from the Model Explorer to the diagram. Drag-and-drop the Block satisfying the Requirement ( Transportation Subsystem ) from the Model Explorer to the diagram. To Satisfy the Requirement select Abstraction from the Palette and connect the Block to the Requirement . Than on the Properties window, on the Profile tab add the Satisfy Stereotype -t. The Satisfy Stereotype must be in the Applied Stereotypes column!","title":"Requirement and Use case modeling Papyrus guidebook"},{"location":"rete-req-and-uc-modeling-guidebook-en/#requirement-modeling","text":"","title":"Requirement modeling"},{"location":"rete-req-and-uc-modeling-guidebook-en/#diagram-creation","text":"Right click on the selected Package ( Requirements in this example) -> New Diagram -> SysML 1.6 Requirement Diagram . To add a Requirement select Requirement from the Palette and place it on the diagram, then on the Properties window, in the SysML 1.6 tab fill out the Id and the Text fields.","title":"Diagram Creation"},{"location":"rete-req-and-uc-modeling-guidebook-en/#requirement-decomposition","text":"For Requirement Decomposition select Containment Link from the Palette and connect two Requirements . Pay attention to the direction of the connection!","title":"Requirement Decomposition"},{"location":"rete-req-and-uc-modeling-guidebook-en/#deriving-requirements","text":"To Derive Requirements select DeriveReqt from the Palette and connect two Requirements . Pay attention to the direction of the connection!","title":"Deriving Requirements"},{"location":"rete-req-and-uc-modeling-guidebook-en/#use-case-modeling","text":"","title":"Use Case modeling"},{"location":"rete-req-and-uc-modeling-guidebook-en/#diagram-creation_1","text":"Right click on the selected Package ( UseCases in this example) -> New Diagram -> SysML 1.6 Use Case Diagram . Drag-and-drop a block representing the boundry of the system ( System Boundary ) from the Model Explorer to the diagram.","title":"Diagram Creation"},{"location":"rete-req-and-uc-modeling-guidebook-en/#adding-actors-and-use-cases","text":"To add an Actor select Actor from the Palette and place it on the diagram. To add a Use Case select Use Case from the Palette and place it on the diagram. To add an Association between the Actor and the Use Case select Communication Path from the Palette and connect the Actor and the Use Case .","title":"Adding Actors and Use Cases"},{"location":"rete-req-and-uc-modeling-guidebook-en/#relations-between-actors","text":"To Generalize Actors select Generalization from the Palette and connect two Actors . Pay attention to the direction of the connection!","title":"Relations between Actors"},{"location":"rete-req-and-uc-modeling-guidebook-en/#relations-between-use-cases","text":"To Generalize Use Cases select Generalization from the Palette and connect two Use Cases . Pay attention to the direction of the connection! To Refine a Use Case select Include from the Palette and connect two Use Cases . Pay attention to the direction of the connection! To Extend a Use Case select Extend from the Palette and connect two Use Cases . Pay attention to the direction of the connection!","title":"Relations between Use Cases"},{"location":"rete-req-and-uc-modeling-guidebook-en/#traceability","text":"","title":"Traceability"},{"location":"rete-req-and-uc-modeling-guidebook-en/#diagram-creation_2","text":"Right click on the selected Package ( UseCases in this example) -> New Diagram -> SysML 1.6 Block Definition Diagram . Drag-and-drop the Requirement ( Transport Cargo ) from the Model Explorer to the diagram. Drag-and-drop the Block satisfying the Requirement ( Transportation Subsystem ) from the Model Explorer to the diagram. To Satisfy the Requirement select Abstraction from the Palette and connect the Block to the Requirement . Than on the Properties window, on the Profile tab add the Satisfy Stereotype -t. The Satisfy Stereotype must be in the Applied Stereotypes column!","title":"Diagram Creation"},{"location":"rete-req-and-uc-modeling-guidebook/","text":"K\u00f6vetelm\u00e9ny modellez\u00e9s Diagram l\u00e9trehoz\u00e1s Jobb katt a kiv\u00e1lasztott Package -en ( Requirements ebben a p\u00e9ld\u00e1ban) -> New Diagram -> SysML 1.6 Requirement Diagram . Requirement hozz\u00e1ad\u00e1shoz a Palette -r\u0151l v\u00e1lasszuk ki az Requirement -t \u00e9s helyezz\u00fck el a diagramon, majd a Properties ablakban a SysML 1.6 f\u00fcl\u00f6n t\u00f6lts\u00fck ki az Id \u00e9s a Text mez\u0151ket. K\u00f6vetelm\u00e9nyek lebont\u00e1sa Requirement lebont\u00e1s\u00e1hoz ( Decomposition ) a Palette -r\u0151l v\u00e1lasszuk ki a Containment Link -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Requirement -\u00fcnket. Figyelj\u00fcnk a nyilak helyes ir\u00e1ny\u00e1ra! K\u00f6vetelm\u00e9nyek sz\u00e1rmaztat\u00e1sa Requirement sz\u00e1rmaztat\u00e1s\u00e1hoz ( Derive ) a Palette -r\u0151l v\u00e1lasszuk ki a DeriveReqt -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Requirement -\u00fcnket. Figyelj\u00fcnk a nyilak helyes ir\u00e1ny\u00e1ra! Use case Modellez\u00e9s Diagram l\u00e9trehoz\u00e1s Jobb katt a kiv\u00e1lasztott Package -en ( UseCases ebben a p\u00e9ld\u00e1ban) -> New Diagram -> SysML 1.6 Use Case Diagram . Drag-and-drop haszn\u00e1lat\u00e1val a Model Explorer -b\u0151l helyezz\u00fck r\u00e1 a rendszer hat\u00e1r\u00e1t ( System Boundary ) reprezent\u00e1l\u00f3 block-ot a diagramra. Actorok \u00e9s Use Case-ek felv\u00e9tele Actor hozz\u00e1ad\u00e1shoz a Palette -r\u0151l v\u00e1lasszuk ki az Actor -t \u00e9s helyezz\u00fck el a diagramon. Use Case hozz\u00e1ad\u00e1shoz a Palette -r\u0151l v\u00e1lasszuk ki az Use Case -t \u00e9s helyezz\u00fck el a diagramon. Asszoci\u00e1ci\u00f3 ( Association ) felv\u00e9tel\u00e9hez a Palette -r\u0151l v\u00e1lasszuk ki a Communication Path -t, majd k\u00f6ss\u00fck \u00f6ssze vele az Actor -t \u00e9s a Use Case -t. Actorok k\u00f6z\u00f6tti kapcsolatok felv\u00e9tele Lesz\u00e1rmaz\u00e1s ( Generalization ) felv\u00e9tel\u00e9hez a Palette -r\u0151l v\u00e1lasszuk ki a Generalization -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Actor -unkat. Use Case-ek k\u00f6z\u00f6tti kapcsolatok felv\u00e9tele Lesz\u00e1rmaz\u00e1s ( Generalization ) felv\u00e9tel\u00e9hez a Palette -r\u0151l v\u00e1lasszuk ki a Generalization -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Use Case -\u00fcnket. Use Case finom\u00edt\u00e1s\u00e1hoz ( Refinement ) a Palette -r\u0151l v\u00e1lasszuk ki a Include -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Use Case -\u00fcnket. Figyelj\u00fcnk a nyilak helyes ir\u00e1ny\u00e1ra! Use Case b\u0151v\u00edt\u00e9s\u00e9hez ( Extension ) a Palette -r\u0151l v\u00e1lasszuk ki a Extend -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Use Case -\u00fcnket. Figyelj\u00fcnk a nyilak helyes ir\u00e1ny\u00e1ra! Nyomonk\u00f6vethet\u0151s\u00e9g Diagram l\u00e9trehoz\u00e1s Jobb katt a kiv\u00e1lasztott Package -en ( Traceability ebben a p\u00e9ld\u00e1ban) -> New Diagram -> SysML 1.6 Block Definition Diagram . Drag-and-drop haszn\u00e1lat\u00e1val a Model Explorer -b\u0151l helyezz\u00fck r\u00e1 a k\u00f6vetelm\u00e9nyt ( Transport Cargo ) a diagramra. Drag-and-drop haszn\u00e1lat\u00e1val a Model Explorer -b\u0151l helyezz\u00fck r\u00e1 a k\u00f6vetelm\u00e9nyt megval\u00f3s\u00edt\u00f3s Block -ot ( Transportation Subsystem ) a diagramra. K\u00f6vetelm\u00e9ny kiel\u00e9g\u00edt\u00e9s\u00e9hez ( Satisfy ) a Palette -r\u0151l v\u00e1lasszuk ki a Abstraction -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Block -unkat a Requirement -\u00fcnkkel. Ezut\u00e1n a Properties ablakon a Profile f\u00fcl\u00f6n adjuk hozz\u00e1 a Satisfy Stereotype -t. Figyelj\u00fcnk r\u00e1, hogy a Satisfy -nak az Applied Stereotypes has\u00e1bban legyen, ezut\u00e1n ok\u00e9zzuk csak le.","title":"K\u00f6vetelm\u00e9ny \u00e9s Use case modellez\u00e9s Papyrus seg\u00e9dlet"},{"location":"rete-req-and-uc-modeling-guidebook/#kovetelmeny-modellezes","text":"","title":"K\u00f6vetelm\u00e9ny modellez\u00e9s"},{"location":"rete-req-and-uc-modeling-guidebook/#diagram-letrehozas","text":"Jobb katt a kiv\u00e1lasztott Package -en ( Requirements ebben a p\u00e9ld\u00e1ban) -> New Diagram -> SysML 1.6 Requirement Diagram . Requirement hozz\u00e1ad\u00e1shoz a Palette -r\u0151l v\u00e1lasszuk ki az Requirement -t \u00e9s helyezz\u00fck el a diagramon, majd a Properties ablakban a SysML 1.6 f\u00fcl\u00f6n t\u00f6lts\u00fck ki az Id \u00e9s a Text mez\u0151ket.","title":"Diagram l\u00e9trehoz\u00e1s"},{"location":"rete-req-and-uc-modeling-guidebook/#kovetelmenyek-lebontasa","text":"Requirement lebont\u00e1s\u00e1hoz ( Decomposition ) a Palette -r\u0151l v\u00e1lasszuk ki a Containment Link -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Requirement -\u00fcnket. Figyelj\u00fcnk a nyilak helyes ir\u00e1ny\u00e1ra!","title":"K\u00f6vetelm\u00e9nyek lebont\u00e1sa"},{"location":"rete-req-and-uc-modeling-guidebook/#kovetelmenyek-szarmaztatasa","text":"Requirement sz\u00e1rmaztat\u00e1s\u00e1hoz ( Derive ) a Palette -r\u0151l v\u00e1lasszuk ki a DeriveReqt -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Requirement -\u00fcnket. Figyelj\u00fcnk a nyilak helyes ir\u00e1ny\u00e1ra!","title":"K\u00f6vetelm\u00e9nyek sz\u00e1rmaztat\u00e1sa"},{"location":"rete-req-and-uc-modeling-guidebook/#use-case-modellezes","text":"","title":"Use case Modellez\u00e9s"},{"location":"rete-req-and-uc-modeling-guidebook/#diagram-letrehozas_1","text":"Jobb katt a kiv\u00e1lasztott Package -en ( UseCases ebben a p\u00e9ld\u00e1ban) -> New Diagram -> SysML 1.6 Use Case Diagram . Drag-and-drop haszn\u00e1lat\u00e1val a Model Explorer -b\u0151l helyezz\u00fck r\u00e1 a rendszer hat\u00e1r\u00e1t ( System Boundary ) reprezent\u00e1l\u00f3 block-ot a diagramra.","title":"Diagram l\u00e9trehoz\u00e1s"},{"location":"rete-req-and-uc-modeling-guidebook/#actorok-es-use-case-ek-felvetele","text":"Actor hozz\u00e1ad\u00e1shoz a Palette -r\u0151l v\u00e1lasszuk ki az Actor -t \u00e9s helyezz\u00fck el a diagramon. Use Case hozz\u00e1ad\u00e1shoz a Palette -r\u0151l v\u00e1lasszuk ki az Use Case -t \u00e9s helyezz\u00fck el a diagramon. Asszoci\u00e1ci\u00f3 ( Association ) felv\u00e9tel\u00e9hez a Palette -r\u0151l v\u00e1lasszuk ki a Communication Path -t, majd k\u00f6ss\u00fck \u00f6ssze vele az Actor -t \u00e9s a Use Case -t.","title":"Actorok \u00e9s Use Case-ek felv\u00e9tele"},{"location":"rete-req-and-uc-modeling-guidebook/#actorok-kozotti-kapcsolatok-felvetele","text":"Lesz\u00e1rmaz\u00e1s ( Generalization ) felv\u00e9tel\u00e9hez a Palette -r\u0151l v\u00e1lasszuk ki a Generalization -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Actor -unkat.","title":"Actorok k\u00f6z\u00f6tti kapcsolatok felv\u00e9tele"},{"location":"rete-req-and-uc-modeling-guidebook/#use-case-ek-kozotti-kapcsolatok-felvetele","text":"Lesz\u00e1rmaz\u00e1s ( Generalization ) felv\u00e9tel\u00e9hez a Palette -r\u0151l v\u00e1lasszuk ki a Generalization -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Use Case -\u00fcnket. Use Case finom\u00edt\u00e1s\u00e1hoz ( Refinement ) a Palette -r\u0151l v\u00e1lasszuk ki a Include -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Use Case -\u00fcnket. Figyelj\u00fcnk a nyilak helyes ir\u00e1ny\u00e1ra! Use Case b\u0151v\u00edt\u00e9s\u00e9hez ( Extension ) a Palette -r\u0151l v\u00e1lasszuk ki a Extend -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Use Case -\u00fcnket. Figyelj\u00fcnk a nyilak helyes ir\u00e1ny\u00e1ra!","title":"Use Case-ek k\u00f6z\u00f6tti kapcsolatok felv\u00e9tele"},{"location":"rete-req-and-uc-modeling-guidebook/#nyomonkovethetoseg","text":"","title":"Nyomonk\u00f6vethet\u0151s\u00e9g"},{"location":"rete-req-and-uc-modeling-guidebook/#diagram-letrehozas_2","text":"Jobb katt a kiv\u00e1lasztott Package -en ( Traceability ebben a p\u00e9ld\u00e1ban) -> New Diagram -> SysML 1.6 Block Definition Diagram . Drag-and-drop haszn\u00e1lat\u00e1val a Model Explorer -b\u0151l helyezz\u00fck r\u00e1 a k\u00f6vetelm\u00e9nyt ( Transport Cargo ) a diagramra. Drag-and-drop haszn\u00e1lat\u00e1val a Model Explorer -b\u0151l helyezz\u00fck r\u00e1 a k\u00f6vetelm\u00e9nyt megval\u00f3s\u00edt\u00f3s Block -ot ( Transportation Subsystem ) a diagramra. K\u00f6vetelm\u00e9ny kiel\u00e9g\u00edt\u00e9s\u00e9hez ( Satisfy ) a Palette -r\u0151l v\u00e1lasszuk ki a Abstraction -t, majd k\u00f6ss\u00fck \u00f6ssze vele a k\u00e9t Block -unkat a Requirement -\u00fcnkkel. Ezut\u00e1n a Properties ablakon a Profile f\u00fcl\u00f6n adjuk hozz\u00e1 a Satisfy Stereotype -t. Figyelj\u00fcnk r\u00e1, hogy a Satisfy -nak az Applied Stereotypes has\u00e1bban legyen, ezut\u00e1n ok\u00e9zzuk csak le.","title":"Diagram l\u00e9trehoz\u00e1s"},{"location":"rete-seq/","text":"Diagram creation Inside the Model Explorer windows of Papyrus, right-click the destination package, and choose new diagram / SysML 1.6 Sequence Diagram . This should create the following structure in the model explorer window. Visually, the sequence diagram editor should look like this. Structure To add lifelines of participants (parts) to the interaction, drag and drop blocks onto the diagram area, or choose the lifeline element in the palette to the right. Messages (including found & lost messages) can be added via the same palette. To set the contents of the message, add the corresponding signal in the properties window (as a signature). Execution specifications can also be added from the palette. Ensure that the execution speficiation has reasonable start and finish points (events). Here, start is bound to the message reception, but finish has no constraint. Synchronous and asynchronous messages can be added from the palette to the diagram are between lifelines. Such messages need not contain a signal, if the semantics of the message do not require such specification (e.g., a return message does not need to specify a type). Combined fragments are a bit cumbersome to use, because they re-arrange the containment hierarchy in the model explorer every time they are moved (and thus include/exclude some elements). The type of the fragment can be selected from a drop-down in the properties window. The label of the combined fragment is added via simple string literals using the properties window. State invariants are added from the palette onto lifelines. The specification of the state invariant is done through the constraint pop-up in the properties window. Instead of duration constraints (which are not supported for SysML sequence diagrams in Papyrus), we can use time constraints at specific events. Add a time constraint from the palette onto a lifeline at a message send/receive point: Ensure that the constrained element is sensible (not unconstrained): To show a duration, use an initial \"t[N]\" label, then an offset. Here, a 10 second offset is used to specify that the duration of the execution specification is 10 seconds. Note that separate starting points are necessary for the lifelines (i.e., do not use t[0] on the second lifeline in the example).","title":"Sequence Diagrams Papyrus guidebook"},{"location":"rete-seq/#diagram-creation","text":"Inside the Model Explorer windows of Papyrus, right-click the destination package, and choose new diagram / SysML 1.6 Sequence Diagram . This should create the following structure in the model explorer window. Visually, the sequence diagram editor should look like this.","title":"Diagram creation"},{"location":"rete-seq/#structure","text":"To add lifelines of participants (parts) to the interaction, drag and drop blocks onto the diagram area, or choose the lifeline element in the palette to the right. Messages (including found & lost messages) can be added via the same palette. To set the contents of the message, add the corresponding signal in the properties window (as a signature). Execution specifications can also be added from the palette. Ensure that the execution speficiation has reasonable start and finish points (events). Here, start is bound to the message reception, but finish has no constraint. Synchronous and asynchronous messages can be added from the palette to the diagram are between lifelines. Such messages need not contain a signal, if the semantics of the message do not require such specification (e.g., a return message does not need to specify a type). Combined fragments are a bit cumbersome to use, because they re-arrange the containment hierarchy in the model explorer every time they are moved (and thus include/exclude some elements). The type of the fragment can be selected from a drop-down in the properties window. The label of the combined fragment is added via simple string literals using the properties window. State invariants are added from the palette onto lifelines. The specification of the state invariant is done through the constraint pop-up in the properties window. Instead of duration constraints (which are not supported for SysML sequence diagrams in Papyrus), we can use time constraints at specific events. Add a time constraint from the palette onto a lifeline at a message send/receive point: Ensure that the constrained element is sensible (not unconstrained): To show a duration, use an initial \"t[N]\" label, then an offset. Here, a 10 second offset is used to specify that the duration of the execution specification is 10 seconds. Note that separate starting points are necessary for the lifelines (i.e., do not use t[0] on the second lifeline in the example).","title":"Structure"},{"location":"rete-stm/","text":"Diagram creation Inside the Model Explorer windows of Papyrus, right-click the destination package, and choose new diagram / SysML 1.6 State Machine Diagram . This should create the following structure in the model explorer window. Note the state machine has a single region (inside statemachine, regions and states alternate in the containment hierarchy). Visually, the state machine editor should look like this. Basic Structure From the palette window to the right, drag and drop an initial state, a final state and a transition connecting the two onto the diagram area. Now drop a state from the palette onto the diagram, and connect the initial and final states in the following way: This should create the following structure in the model explorer. Note that the Working state has no children. Now drop a state inside the Working state. This will automatically create a region inside the state (to preserve the alternating regions and states), and place the new states inside. Visually, nested states look like as follows (with added triggers between the On and Off states): To add behavior to the state machine, we can define triggers , guards and actions / effects on transitions. First, let's create a trigger on the transitions between the On and Off states. To do so, choose the trigger box in the transition's properties window, and create a trigger just like in activity diagrams. To specify which port the trigger signal might arrive, use the properties window: Visually, a trigger will appear as a label on the diagram. So far, nested states created an OR -refinement of the container states. To create AND -refinement (a.k.a. orthogonal regions), drag and drop a region inside the On state. Firstly, this is done without any problems, but when dropping the second one, the editor expects the user to decide how they want to divide the state (horizontally or vertically). Here, we chose a vertical division. Next, add a state and an initial state inside one of the regions, with a self-loop transition containing a trigger for the signal Ping . The Ponger state should reply with a Pong every time it receives a Ping . This is achieved by using an effect on the transition. Locate the effect box inside the transition's properties window, and add an opaque behavior. Choose a language for the opaque behavior. Here we chose to use \"Natural Language\" so we can use english words on the transition. Add the text describing the behavior to the text box on the right. An alternative to the opaque behavior (which uses informal descriptions) is to use an activity behavior. This will prompt the user to provide a name for the activity. In the model explorer, the activity is shows as the child of the transition - to edit the contents of the effect, create a separate activity diagram and drop the activity onto its diagram area. Visually, an effect is shows as text after the divisor \"/\" in the label of the transition. To create a history state (instead of an initial state), drop the corresponding element onto the diagram area. As the transition towards the final state has been triggered by the completition event so far (thus rendering the inside of the Working state inoperable), we need to add a trigger to it. If we choose to create a timing event, we can do so using the same technique as for accept event actions in activity diagrams. The summary can be seen below: Visually, time-based triggers are shown with either an after or an at label, depending on the relative-ness of the event. If we want to invoke specific behaviors every time a state is entered/exited, we can use entry and exit actions on the state. Here, the same rules apply as to effects of transitions - we can simply create opaque behaviors, or model them using for example activity diagrams. Visually, these labels are shown inside the state. To accept a trigger and then decide what to do, we can use the decision pseudostate. To create the guards, we can use the properties window of the transitions. Visually, guards are represented using brackets, as seen below.","title":"State Machine Diagrams Papyrus guidebook"},{"location":"rete-stm/#diagram-creation","text":"Inside the Model Explorer windows of Papyrus, right-click the destination package, and choose new diagram / SysML 1.6 State Machine Diagram . This should create the following structure in the model explorer window. Note the state machine has a single region (inside statemachine, regions and states alternate in the containment hierarchy). Visually, the state machine editor should look like this.","title":"Diagram creation"},{"location":"rete-stm/#basic-structure","text":"From the palette window to the right, drag and drop an initial state, a final state and a transition connecting the two onto the diagram area. Now drop a state from the palette onto the diagram, and connect the initial and final states in the following way: This should create the following structure in the model explorer. Note that the Working state has no children. Now drop a state inside the Working state. This will automatically create a region inside the state (to preserve the alternating regions and states), and place the new states inside. Visually, nested states look like as follows (with added triggers between the On and Off states): To add behavior to the state machine, we can define triggers , guards and actions / effects on transitions. First, let's create a trigger on the transitions between the On and Off states. To do so, choose the trigger box in the transition's properties window, and create a trigger just like in activity diagrams. To specify which port the trigger signal might arrive, use the properties window: Visually, a trigger will appear as a label on the diagram. So far, nested states created an OR -refinement of the container states. To create AND -refinement (a.k.a. orthogonal regions), drag and drop a region inside the On state. Firstly, this is done without any problems, but when dropping the second one, the editor expects the user to decide how they want to divide the state (horizontally or vertically). Here, we chose a vertical division. Next, add a state and an initial state inside one of the regions, with a self-loop transition containing a trigger for the signal Ping . The Ponger state should reply with a Pong every time it receives a Ping . This is achieved by using an effect on the transition. Locate the effect box inside the transition's properties window, and add an opaque behavior. Choose a language for the opaque behavior. Here we chose to use \"Natural Language\" so we can use english words on the transition. Add the text describing the behavior to the text box on the right. An alternative to the opaque behavior (which uses informal descriptions) is to use an activity behavior. This will prompt the user to provide a name for the activity. In the model explorer, the activity is shows as the child of the transition - to edit the contents of the effect, create a separate activity diagram and drop the activity onto its diagram area. Visually, an effect is shows as text after the divisor \"/\" in the label of the transition. To create a history state (instead of an initial state), drop the corresponding element onto the diagram area. As the transition towards the final state has been triggered by the completition event so far (thus rendering the inside of the Working state inoperable), we need to add a trigger to it. If we choose to create a timing event, we can do so using the same technique as for accept event actions in activity diagrams. The summary can be seen below: Visually, time-based triggers are shown with either an after or an at label, depending on the relative-ness of the event. If we want to invoke specific behaviors every time a state is entered/exited, we can use entry and exit actions on the state. Here, the same rules apply as to effects of transitions - we can simply create opaque behaviors, or model them using for example activity diagrams. Visually, these labels are shown inside the state. To accept a trigger and then decide what to do, we can use the decision pseudostate. To create the guards, we can use the properties window of the transitions. Visually, guards are represented using brackets, as seen below.","title":"Basic Structure"},{"location":"safest/","text":"Introduction FTEdit is a fault tree editing and analysis tool for static and dynamic fault trees. As the Systems Engineering course covers only static fault tree, only a subset of its features will be needed. Installation Installation and execution instruction for SAFEST can be found here . A license is also needed to run the tool, you can register for a free academic license here . Modeling and evaluating static fault trees You can create a new project from File -> New Project . Enter the name of the project (all the other fields are optional. A project can contain multiple failure models, which you can see under Failure Models on the left side. One failure model is automatically created together with the project. You can change the properties of the model itself if you select it on the sidebar. Make sure to change the type of the fault tree to Static , as not all types of analysis are available for dynamic fault tree (e.g. cut set computation). Another important property is the Time Bound (life cycle) : the calculated reliability values will correspont to this time. Don't forget to click the save button after changing the properties. The fault tree can be edited after selecting the Fault Tree label under the corresponding failure model on the sidebar. The toolbox can be seen at the top of the editor pane. The leftmost element on it is a Basic Event , which is followed by the AND , OR , and VOT (voting) gates. The last one is a BLOCK gate, which functions like an import: it copies another whole fault tree model into the current fault tree. It can be used to make large models easier to read -- you don't have to use it in this course. If you see other gates in the toolbox, then the fault tree type is likely set to dynamic in the failure model properties. You can create new elements by clicking on the canvas while an element type is selected in the toolbox. An element type remains selected after clicking it until you click it again. Edges can be created by hovering over an element (making a red dot appear), and dragging the red dot to another element. Only gates can have incoming edges. You can delete an element or an edge by right-clicking it and selecting remove element/edge from the context menu. The properties of an element can be edited by left-clicking it. Both gates and basic events can be named from here, and you can make them top-level by clicking the top level element check-box at the bottom. You must have exactly one top-level element in the tree before analysing it. Basic Events have failure distributions. Choose Enter Failure Distribution if you want to specify the distribution in place and Select Failure Distribution if you want to select from the distributions specified in a parameter set (we won't discuss parameter sets here, you don't have to use them in your assignment). Use Exponential Distribution distribution if a failure rate is given, your and you want SAFEST to compute the reliability of the component at the end of the life cycle. Neither the failure rates, nor the time parameters use units of measurement, so make sure to use numeric values with consistent units throughout the project. Use Probability , if you want to explicitly specify the probability that the event happened (the corresponding component is in a failed state or the component is unavailable, depending on the aim of the analysis), ignoring the life cycle property of the failure model. Other distribution types aren't needed for this assignment. You can compute the minimal cut sets of the fault tree by selecting Minimal Cut Sets under Computing on the sidebar. Click the icon above the (currently empty) minimal cut list to perform the computation. Select the failure model you are interested in and click Start . The minimal cut set list will be populated by the results. The selected cut set is visualized on the right. You can perform quantitative analysis by selecting Analysis under Computing on the sidebar. From the available metric, we will be interested in Unreliability and Reliability in this assignment. Keep in mind that fault trees describe the system from a negative perspective, so the probability of the top event happening during the life cycle will be the Unreliability metric. After choosing the metric of interest, a window will appear where you can set parameters of the analysis. You do not have to change anything here (you can override the life cycle duration here by changing the time_bound value if you want to), just click Run . The results will appear in the results table.","title":"SAFEST - Fault Tree Editing tool"},{"location":"safest/#introduction","text":"FTEdit is a fault tree editing and analysis tool for static and dynamic fault trees. As the Systems Engineering course covers only static fault tree, only a subset of its features will be needed.","title":"Introduction"},{"location":"safest/#installation","text":"Installation and execution instruction for SAFEST can be found here . A license is also needed to run the tool, you can register for a free academic license here .","title":"Installation"},{"location":"safest/#modeling-and-evaluating-static-fault-trees","text":"You can create a new project from File -> New Project . Enter the name of the project (all the other fields are optional. A project can contain multiple failure models, which you can see under Failure Models on the left side. One failure model is automatically created together with the project. You can change the properties of the model itself if you select it on the sidebar. Make sure to change the type of the fault tree to Static , as not all types of analysis are available for dynamic fault tree (e.g. cut set computation). Another important property is the Time Bound (life cycle) : the calculated reliability values will correspont to this time. Don't forget to click the save button after changing the properties. The fault tree can be edited after selecting the Fault Tree label under the corresponding failure model on the sidebar. The toolbox can be seen at the top of the editor pane. The leftmost element on it is a Basic Event , which is followed by the AND , OR , and VOT (voting) gates. The last one is a BLOCK gate, which functions like an import: it copies another whole fault tree model into the current fault tree. It can be used to make large models easier to read -- you don't have to use it in this course. If you see other gates in the toolbox, then the fault tree type is likely set to dynamic in the failure model properties. You can create new elements by clicking on the canvas while an element type is selected in the toolbox. An element type remains selected after clicking it until you click it again. Edges can be created by hovering over an element (making a red dot appear), and dragging the red dot to another element. Only gates can have incoming edges. You can delete an element or an edge by right-clicking it and selecting remove element/edge from the context menu. The properties of an element can be edited by left-clicking it. Both gates and basic events can be named from here, and you can make them top-level by clicking the top level element check-box at the bottom. You must have exactly one top-level element in the tree before analysing it. Basic Events have failure distributions. Choose Enter Failure Distribution if you want to specify the distribution in place and Select Failure Distribution if you want to select from the distributions specified in a parameter set (we won't discuss parameter sets here, you don't have to use them in your assignment). Use Exponential Distribution distribution if a failure rate is given, your and you want SAFEST to compute the reliability of the component at the end of the life cycle. Neither the failure rates, nor the time parameters use units of measurement, so make sure to use numeric values with consistent units throughout the project. Use Probability , if you want to explicitly specify the probability that the event happened (the corresponding component is in a failed state or the component is unavailable, depending on the aim of the analysis), ignoring the life cycle property of the failure model. Other distribution types aren't needed for this assignment. You can compute the minimal cut sets of the fault tree by selecting Minimal Cut Sets under Computing on the sidebar. Click the icon above the (currently empty) minimal cut list to perform the computation. Select the failure model you are interested in and click Start . The minimal cut set list will be populated by the results. The selected cut set is visualized on the right. You can perform quantitative analysis by selecting Analysis under Computing on the sidebar. From the available metric, we will be interested in Unreliability and Reliability in this assignment. Keep in mind that fault trees describe the system from a negative perspective, so the probability of the top event happening during the life cycle will be the Unreliability metric. After choosing the metric of interest, a window will appear where you can set parameters of the analysis. You do not have to change anything here (you can override the life cycle duration here by changing the time_bound value if you want to), just click Run . The results will appear in the results table.","title":"Modeling and evaluating static fault trees"},{"location":"structural-modeling-guide/","text":"Model properties and ports Create an IBD of a block, and right click on the diagram and select \" Synchronize Structural Elements \". In the Interaction Point and Parts/Properties tab of the Features window you can make visible the port and properties of the properties. If you change the name or an attribute of a port or a property, then the type of the containing property will be updated automatically. Warning: this feature sometimes is a little bit buggy. Use the tools in the Layout menu to arrange the properties. The allignment tools and the make all propety same size tools can be specially usefuly. Warning: small properties will be automatically resized if you close and reopen a diagram, so make all property much bigger than neccessary to prevent this. It is also advised to move the label of the ports inside the properties. You can add ports and properties to the the block of the IDB or to the properties of the block by dragging blocks into the diagram and selecting property or port in the \" Drop as \" field. Note that this way the new porerty will not apprear as part property. Model connections and information flows Create connectors and information flows using the Toolbox. Alternatively, if you can select a port or property and drag the arrow in the upper-right corner of the property and select the type of the connection. You can add information flow to connector, by right clicking the connectors and choose \" Advanved/Information Flows Realized... \". Then you can select the type of the flowing information. If two properties and ports are connected with a connector and with multiple information flows then you can use \" Advanved/Information Flows Realized... \" settings to add the information flows to the connector Model composite ports Define a block, which has some ports. Define some ports with the new block as a type. Select the port and visualize the sub-ports in the \" Interaction Points \" tab of the Features window. (This approach also works in IBD.) If the composite port is conjugated then the arrows of all sub-ports will change direction.","title":"Structural modeling using Enterprise Architect"},{"location":"structural-modeling-guide/#model-properties-and-ports","text":"Create an IBD of a block, and right click on the diagram and select \" Synchronize Structural Elements \". In the Interaction Point and Parts/Properties tab of the Features window you can make visible the port and properties of the properties. If you change the name or an attribute of a port or a property, then the type of the containing property will be updated automatically. Warning: this feature sometimes is a little bit buggy. Use the tools in the Layout menu to arrange the properties. The allignment tools and the make all propety same size tools can be specially usefuly. Warning: small properties will be automatically resized if you close and reopen a diagram, so make all property much bigger than neccessary to prevent this. It is also advised to move the label of the ports inside the properties. You can add ports and properties to the the block of the IDB or to the properties of the block by dragging blocks into the diagram and selecting property or port in the \" Drop as \" field. Note that this way the new porerty will not apprear as part property.","title":"Model properties and ports"},{"location":"structural-modeling-guide/#model-connections-and-information-flows","text":"Create connectors and information flows using the Toolbox. Alternatively, if you can select a port or property and drag the arrow in the upper-right corner of the property and select the type of the connection. You can add information flow to connector, by right clicking the connectors and choose \" Advanved/Information Flows Realized... \". Then you can select the type of the flowing information. If two properties and ports are connected with a connector and with multiple information flows then you can use \" Advanved/Information Flows Realized... \" settings to add the information flows to the connector","title":"Model connections and information flows"},{"location":"structural-modeling-guide/#model-composite-ports","text":"Define a block, which has some ports. Define some ports with the new block as a type. Select the port and visualize the sub-ports in the \" Interaction Points \" tab of the Features window. (This approach also works in IBD.) If the composite port is conjugated then the arrows of all sub-ports will change direction.","title":"Model composite ports"},{"location":"usecase-and-requirement-guide/","text":"Create a glossary A glossary can be created in multiple ways, this tutorial shows the simplest one. In EA, the definitions are modeled by classes with the << GlossaryEntry >> stereotype. The name of the class is the defined expression and the note of the class is the definition of the expression. The glossary entries are organized into categories, which are packages with the << GlossaryCategory >> stereotype. The glossary is a UML class diagram, which is in \" Specification View \". Create a package and select the \" Select and Apply Model Pattern \". Choose the \" SysML Glossary \" pattern. This pattern will create a simple glossary with the definitions of the SysML's modeling elements. Click on \" Create Model \"- Right-click on the glossary diagram and select \" Switch View/Graphical View \". Delete all the glossary entries except one and rename the remaining entry and modify its note. Using the toolbox you can add new categories and entries. After you have finished the glossary definitions change the view of the diagram back to \" Specification \" mode. Alternatively you can add glossary entries if you set the perspective into \" Publishing/Glossary \" and click on \" Add New \". Use case modeling Create a SysML use case diagram and define some use cases using the Toolbox. Add some notes to the use cases. Define the actors, the boundaries of the system and the relations between the modeling elements using the Toolbox. Create another use case diagram and pull the previously defined use cases into the diagram. You may give the diagram a name similar to \" Use case specifications \". Change the view of the diagram into \" Specification View \". Scenarios of the use cases If you double-click on any use case, then EA will automatically open the \" Scenario Specification \" of the selected use case. In the newly opened \" Scenario \" window you can specify the basic path of the use case. You can add steps to the path if you write the name of the step in the \" new step \" field. Additionally, you can specify the used and resulting objects of the step in the \" Uses \" and \" Results \" columns, respectively. You can use the \" State \" column to specify that the step occurs in a specific state of the system. If you select a step, then you can move the step forward and backward using the green arrows in the top menu bar. If you select a step, then you can add alternate and exception paths using the yellow and orange path icons in the top menu bar. If you create an alternate or exception path then you can add steps to the path in the table. You can select different paths in the \" Entry Points \" tab below the table of steps. If you select a path then you can change the type (basic/alternate/exception) and the name of the path in the \" Type \" and \" Scenario \" fields. After you have created the paths and steps of the paths, then you can generate an activity diagram from the scenario definition by clicking the diagram icon and selecting \" Activity with ActivityParameter \". This command will automatically create an activity and a UML Activity diagram. In the diagram, each step is an activity action and the in- and output of the actions are activity parameters. The alternate and exception paths are transformed into \" decision \" control nodes. You can visualize the inputs and the outputs of the activities if you select an action and in \" Interaction Points \" tab of the Features window turn on the visibility of the activity parameters. Thereafter, you can connect the activity parameters with object flow. Alternatively, you can generate a state machine diagram from the scenarios. In the state machine diagram, the transitions are generated from the actions, and the states of the diagram are defined by the \" State \" column of the scenario table. Constraints of use cases If you double-click on any use case, then EA will automatically open the \" Scenario Specification \" of the selected use case. In the \" Constraints \" tab of the \" Scenario \" window you can specify the constraints of the use cases. If you click on the \"Add New\" icon in the constraints tab you can add a constraint to the use case. In the pop-up window you can specify the name of the constraint in the \" Constraint \" field and you can set the type (Invariant/Pre-condition/Post-condition) of the constraint in the \" Properties \" field. Below the name of the constraint, you can add some notes to the constraint. You can apply the changes by clicking on the \" Save \" button. The new constraint will appear in the \" Constraints \" tab. You can edit existing constraints if you double-click on the constraint. Alternatively, you can add and modify constraints if you right-click on a use case, select the \" Properties \" option, and then select the \" Responsibilities/Constraints \" tab in the pop-up window. Requirement modeling Create a requirement diagram. Define some requirements using the Toolbox. Set the ID of the requirement in the Properties window. Set the Text of the requirement by clicking the three dot icon in the Properties window. Write the text of the requirement in the pop-up window and press OK. If the Text and the ID do not appear in the diagram, then click on the diagram, and in the Compartments tab of the Properties window turn on the visibility of tags. For SysML Requirement Extensions the attributes of the requirements can be specified in the Properties window.","title":"Use case and requirement modeling using Enterprise Architect"},{"location":"usecase-and-requirement-guide/#create-a-glossary","text":"A glossary can be created in multiple ways, this tutorial shows the simplest one. In EA, the definitions are modeled by classes with the << GlossaryEntry >> stereotype. The name of the class is the defined expression and the note of the class is the definition of the expression. The glossary entries are organized into categories, which are packages with the << GlossaryCategory >> stereotype. The glossary is a UML class diagram, which is in \" Specification View \". Create a package and select the \" Select and Apply Model Pattern \". Choose the \" SysML Glossary \" pattern. This pattern will create a simple glossary with the definitions of the SysML's modeling elements. Click on \" Create Model \"- Right-click on the glossary diagram and select \" Switch View/Graphical View \". Delete all the glossary entries except one and rename the remaining entry and modify its note. Using the toolbox you can add new categories and entries. After you have finished the glossary definitions change the view of the diagram back to \" Specification \" mode. Alternatively you can add glossary entries if you set the perspective into \" Publishing/Glossary \" and click on \" Add New \".","title":"Create a glossary"},{"location":"usecase-and-requirement-guide/#use-case-modeling","text":"Create a SysML use case diagram and define some use cases using the Toolbox. Add some notes to the use cases. Define the actors, the boundaries of the system and the relations between the modeling elements using the Toolbox. Create another use case diagram and pull the previously defined use cases into the diagram. You may give the diagram a name similar to \" Use case specifications \". Change the view of the diagram into \" Specification View \".","title":"Use case modeling"},{"location":"usecase-and-requirement-guide/#scenarios-of-the-use-cases","text":"If you double-click on any use case, then EA will automatically open the \" Scenario Specification \" of the selected use case. In the newly opened \" Scenario \" window you can specify the basic path of the use case. You can add steps to the path if you write the name of the step in the \" new step \" field. Additionally, you can specify the used and resulting objects of the step in the \" Uses \" and \" Results \" columns, respectively. You can use the \" State \" column to specify that the step occurs in a specific state of the system. If you select a step, then you can move the step forward and backward using the green arrows in the top menu bar. If you select a step, then you can add alternate and exception paths using the yellow and orange path icons in the top menu bar. If you create an alternate or exception path then you can add steps to the path in the table. You can select different paths in the \" Entry Points \" tab below the table of steps. If you select a path then you can change the type (basic/alternate/exception) and the name of the path in the \" Type \" and \" Scenario \" fields. After you have created the paths and steps of the paths, then you can generate an activity diagram from the scenario definition by clicking the diagram icon and selecting \" Activity with ActivityParameter \". This command will automatically create an activity and a UML Activity diagram. In the diagram, each step is an activity action and the in- and output of the actions are activity parameters. The alternate and exception paths are transformed into \" decision \" control nodes. You can visualize the inputs and the outputs of the activities if you select an action and in \" Interaction Points \" tab of the Features window turn on the visibility of the activity parameters. Thereafter, you can connect the activity parameters with object flow. Alternatively, you can generate a state machine diagram from the scenarios. In the state machine diagram, the transitions are generated from the actions, and the states of the diagram are defined by the \" State \" column of the scenario table.","title":"Scenarios of the use cases"},{"location":"usecase-and-requirement-guide/#constraints-of-use-cases","text":"If you double-click on any use case, then EA will automatically open the \" Scenario Specification \" of the selected use case. In the \" Constraints \" tab of the \" Scenario \" window you can specify the constraints of the use cases. If you click on the \"Add New\" icon in the constraints tab you can add a constraint to the use case. In the pop-up window you can specify the name of the constraint in the \" Constraint \" field and you can set the type (Invariant/Pre-condition/Post-condition) of the constraint in the \" Properties \" field. Below the name of the constraint, you can add some notes to the constraint. You can apply the changes by clicking on the \" Save \" button. The new constraint will appear in the \" Constraints \" tab. You can edit existing constraints if you double-click on the constraint. Alternatively, you can add and modify constraints if you right-click on a use case, select the \" Properties \" option, and then select the \" Responsibilities/Constraints \" tab in the pop-up window.","title":"Constraints of use cases"},{"location":"usecase-and-requirement-guide/#requirement-modeling","text":"Create a requirement diagram. Define some requirements using the Toolbox. Set the ID of the requirement in the Properties window. Set the Text of the requirement by clicking the three dot icon in the Properties window. Write the text of the requirement in the pop-up window and press OK. If the Text and the ID do not appear in the diagram, then click on the diagram, and in the Compartments tab of the Properties window turn on the visibility of tags. For SysML Requirement Extensions the attributes of the requirements can be specified in the Properties window.","title":"Requirement modeling"}]}